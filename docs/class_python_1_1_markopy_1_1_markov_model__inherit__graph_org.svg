<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Python.Markopy.MarkovModel Pages: 1 -->
<svg width="303pt" height="1547pt"
 viewBox="0.00 0.00 303.00 1547.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1543)">
<title>Python.Markopy.MarkovModel</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title="Abstract representation of a markov model.">
<polygon fill="#bfbfbf" stroke="black" points="49.5,-521.5 49.5,-662.5 245.5,-662.5 245.5,-521.5 49.5,-521.5"/>
<text text-anchor="middle" x="147.5" y="-648.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkovModel</text>
<polyline fill="none" stroke="black" points="49.5,-641.5 245.5,-641.5 "/>
<text text-anchor="middle" x="147.5" y="-627.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="49.5,-620.5 245.5,-620.5 "/>
<text text-anchor="start" x="57.5" y="-606.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Import(str filename)</text>
<text text-anchor="start" x="57.5" y="-593.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Export(str filename)</text>
<text text-anchor="start" x="57.5" y="-580.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Train(str dataset,</text>
<text text-anchor="start" x="57.5" y="-567.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str seperator, int threads)</text>
<text text-anchor="start" x="57.5" y="-554.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Generate(int count,</text>
<text text-anchor="start" x="57.5" y="-541.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist, int minlen,</text>
<text text-anchor="start" x="57.5" y="-528.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxlen, int threads)</text>
</a>
</g>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="class_python_1_1_markopy_1_1_markov_passwords_c_l_i.html" target="_top" xlink:title="Extension of Python.Markopy.Base.BaseCLI for Markov::API::MarkovPasswords.">
<polygon fill="none" stroke="black" points="28,-382.5 28,-484.5 267,-484.5 267,-382.5 28,-382.5"/>
<text text-anchor="middle" x="147.5" y="-470.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkovPasswordsCLI</text>
<polyline fill="none" stroke="black" points="28,-463.5 267,-463.5 "/>
<text text-anchor="start" x="36" y="-449.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<polyline fill="none" stroke="black" points="28,-442.5 267,-442.5 "/>
<text text-anchor="start" x="36" y="-428.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="36" y="-415.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="36" y="-402.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="36" y="-389.9" font-family="Helvetica,sans-Serif" font-size="12.00"> wordlist)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node1&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M147.5,-511.23C147.5,-502.16 147.5,-493.13 147.5,-484.6"/>
<polygon fill="none" stroke="midnightblue" points="144,-511.45 147.5,-521.45 151,-511.45 144,-511.45"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="class_markov_1_1_a_p_i_1_1_markov_passwords.html" target="_top" xlink:title="Markov::Model with char represented nodes.">
<polygon fill="none" stroke="black" points="0,-699.5 0,-1139.5 295,-1139.5 295,-699.5 0,-699.5"/>
<text text-anchor="middle" x="147.5" y="-1125.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::MarkovPasswords</text>
<polyline fill="none" stroke="black" points="0,-1118.5 295,-1118.5 "/>
<text text-anchor="start" x="8" y="-1104.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ifstream * datasetFile</text>
<text text-anchor="start" x="8" y="-1091.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * modelSavefile</text>
<text text-anchor="start" x="8" y="-1078.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * outputFile</text>
<polyline fill="none" stroke="black" points="0,-1071.5 295,-1071.5 "/>
<text text-anchor="start" x="8" y="-1057.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords()</text>
<text text-anchor="start" x="8" y="-1044.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords(const</text>
<text text-anchor="start" x="8" y="-1031.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *filename)</text>
<text text-anchor="start" x="8" y="-1018.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ifstream * OpenDataset</text>
<text text-anchor="start" x="8" y="-1005.9" font-family="Helvetica,sans-Serif" font-size="12.00">File(const char *filename)</text>
<text text-anchor="start" x="8" y="-992.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="8" y="-979.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="8" y="-966.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="8" y="-953.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ofstream * Save</text>
<text text-anchor="start" x="8" y="-940.9" font-family="Helvetica,sans-Serif" font-size="12.00">(const char *filename)</text>
<text text-anchor="start" x="8" y="-927.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Generate(unsigned</text>
<text text-anchor="start" x="8" y="-914.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, const char</text>
<text text-anchor="start" x="8" y="-901.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *wordlistFileName, int</text>
<text text-anchor="start" x="8" y="-888.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen=6, int maxLen=12,</text>
<text text-anchor="start" x="8" y="-875.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int threads=20)</text>
<text text-anchor="start" x="8" y="-862.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Buff(const char</text>
<text text-anchor="start" x="8" y="-849.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *str, double multiplier,</text>
<text text-anchor="start" x="8" y="-836.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bDontAdjustSelfLoops</text>
<text text-anchor="start" x="8" y="-823.9" font-family="Helvetica,sans-Serif" font-size="12.00">=true, bool bDontAdjustExtendedLoops=false)</text>
<text text-anchor="start" x="8" y="-810.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void TrainThread(Markov</text>
<text text-anchor="start" x="8" y="-797.9" font-family="Helvetica,sans-Serif" font-size="12.00">::API::Concurrency::ThreadShared</text>
<text text-anchor="start" x="8" y="-784.9" font-family="Helvetica,sans-Serif" font-size="12.00">ListHandler *listhandler, char</text>
<text text-anchor="start" x="8" y="-771.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter)</text>
<text text-anchor="start" x="8" y="-758.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void GenerateThread</text>
<text text-anchor="start" x="8" y="-745.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *outputLock,</text>
<text text-anchor="start" x="8" y="-732.9" font-family="Helvetica,sans-Serif" font-size="12.00"> unsigned long int n, std</text>
<text text-anchor="start" x="8" y="-719.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, int</text>
<text text-anchor="start" x="8" y="-706.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M147.5,-689.02C147.5,-679.83 147.5,-670.97 147.5,-662.62"/>
<polygon fill="none" stroke="midnightblue" points="144,-689.13 147.5,-699.13 151,-689.13 144,-689.13"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="class_markov_1_1_model.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="41.5,-1176.5 41.5,-1538.5 253.5,-1538.5 253.5,-1176.5 41.5,-1176.5"/>
<text text-anchor="middle" x="147.5" y="-1524.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::Model&lt; char &gt;</text>
<polyline fill="none" stroke="black" points="41.5,-1517.5 253.5,-1517.5 "/>
<text text-anchor="start" x="49.5" y="-1503.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::map&lt; char, Node</text>
<text text-anchor="start" x="49.5" y="-1490.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; nodes</text>
<text text-anchor="start" x="49.5" y="-1477.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; Node&lt; char &gt; * starterNode</text>
<text text-anchor="start" x="49.5" y="-1464.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="49.5" y="-1451.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; edges</text>
<polyline fill="none" stroke="black" points="41.5,-1444.5 253.5,-1444.5 "/>
<text text-anchor="start" x="49.5" y="-1430.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Model()</text>
<text text-anchor="start" x="49.5" y="-1417.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ char * RandomWalk(Markov</text>
<text text-anchor="start" x="49.5" y="-1404.9" font-family="Helvetica,sans-Serif" font-size="12.00">::Random::RandomEngine</text>
<text text-anchor="start" x="49.5" y="-1391.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *randomEngine, int minSetting,</text>
<text text-anchor="start" x="49.5" y="-1378.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxSetting, char *buffer)</text>
<text text-anchor="start" x="49.5" y="-1365.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void AdjustEdge(const</text>
<text text-anchor="start" x="49.5" y="-1352.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *payload, long</text>
<text text-anchor="start" x="49.5" y="-1339.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int occurrence)</text>
<text text-anchor="start" x="49.5" y="-1326.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(std::ifstream *)</text>
<text text-anchor="start" x="49.5" y="-1313.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(const char</text>
<text text-anchor="start" x="49.5" y="-1300.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="49.5" y="-1287.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(std::ofstream *)</text>
<text text-anchor="start" x="49.5" y="-1274.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(const char</text>
<text text-anchor="start" x="49.5" y="-1261.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="49.5" y="-1248.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Node&lt; char &gt; * StarterNode()</text>
<text text-anchor="start" x="49.5" y="-1235.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="49.5" y="-1222.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; * Edges()</text>
<text text-anchor="start" x="49.5" y="-1209.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::map&lt; char, Node</text>
<text text-anchor="start" x="49.5" y="-1196.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; * Nodes()</text>
<text text-anchor="start" x="49.5" y="-1183.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void OptimizeEdgeOrder()</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M147.5,-1166.11C147.5,-1157.38 147.5,-1148.58 147.5,-1139.79"/>
<polygon fill="none" stroke="midnightblue" points="144,-1166.33 147.5,-1176.33 151,-1166.33 144,-1166.33"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="class_python_1_1_markopy_1_1_markopy_c_l_i.html" target="_top" xlink:title="Top level model selector for Markopy CLI.">
<polygon fill="none" stroke="black" points="54.5,-152.5 54.5,-345.5 240.5,-345.5 240.5,-152.5 54.5,-152.5"/>
<text text-anchor="middle" x="147.5" y="-331.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkopyCLI</text>
<polyline fill="none" stroke="black" points="54.5,-324.5 240.5,-324.5 "/>
<text text-anchor="start" x="62.5" y="-310.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="62.5" y="-297.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="54.5,-290.5 240.5,-290.5 "/>
<text text-anchor="start" x="62.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="62.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00"> add_help=False)</text>
<text text-anchor="start" x="62.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="62.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="62.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="62.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="62.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="62.5" y="-185.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
<text text-anchor="start" x="62.5" y="-172.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def process(self)</text>
<text text-anchor="start" x="62.5" y="-159.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def stub(self)</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node4&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M147.5,-372.02C147.5,-363.54 147.5,-354.65 147.5,-345.71"/>
<polygon fill="none" stroke="midnightblue" points="144,-372.15 147.5,-382.15 151,-372.15 144,-372.15"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_markopy_c_l_i.html" target="_top" xlink:title="CUDA extension to MarkopyCLI.">
<polygon fill="none" stroke="black" points="23.5,-0.5 23.5,-115.5 271.5,-115.5 271.5,-0.5 23.5,-0.5"/>
<text text-anchor="middle" x="147.5" y="-101.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaMarkopyCLI</text>
<polyline fill="none" stroke="black" points="23.5,-94.5 271.5,-94.5 "/>
<text text-anchor="start" x="31.5" y="-80.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="31.5" y="-67.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="23.5,-60.5 271.5,-60.5 "/>
<text text-anchor="start" x="31.5" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ None __init__(self)</text>
<text text-anchor="start" x="31.5" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="31.5" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="31.5" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node5&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M147.5,-142.13C147.5,-133.07 147.5,-124.16 147.5,-115.72"/>
<polygon fill="none" stroke="midnightblue" points="144,-142.39 147.5,-152.39 151,-142.39 144,-142.39"/>
</g>
</g>
</svg>
