name: Check, build and Release
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
env:
  
  # Environment variables for building strategy
  
  GITHUB_ACTION_WIN_PROJECT: D:\a\MarkovPasswords
  # Solution path
  SOLUTION_FILE_PATH: ./

  # Configuration type to build. Required for MSBuild
  BUILD_CONFIGURATION: Release

  # Include directory for MSBuild, python dependencies
  WIN_INC_DIR: C:\hostedtoolcache\windows\Python\*\

jobs:

  # Increment version depending on the action

  decide_version:
    name: Decide Next Version
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.core.outputs.bump }}
      branch: ${{ steps.core.outputs.branch }}
      prerelease: ${{ steps.core.outputs.prerelease }}
      draft: ${{ steps.core.outputs.draft }}

    steps:
    - uses: actions/checkout@v2
    - name: Decide versioning strategy
      id: core
      run: |
        chmod 755 ./.github/action_helpers/*;
        python3 ./.github/action_helpers/build.py version_bump

  reversion:
    needs: decide_version
    name: Bump Version & Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:   

    - uses: actions/checkout@v2    
    
    # Only if its a push to master branch
    - name: Bump Version
      id: tag_version
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: ${{ needs.decide_version.outputs.bump }}
        VERBOSE: true
        RELEASE_BRANCHES: ${{ needs.decide_version.outputs.branch }}

    # Create a new release if its a push to master
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }} 
        release_name: Release v${{ steps.tag_version.outputs.new_tag }} 
        draft: ${{ needs.decide_version.outputs.draft }} 
        prerelease: ${{ needs.decide_version.outputs.prerelease }}


  # set the matrix output depending on the build type
  setup_build_matrix:
    name: Configure version matrix
    runs-on: ubuntu-latest
    outputs:
      windows_matrix: ${{ steps.core.outputs.windows_matrix }}
      linux_matrix: ${{ steps.core.outputs.linux_matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Configure Version Matrix for Python
      id: core
      run: python3 ./.github/action_helpers/build.py version_matrix

  build_linux:
    name: Build All on Linux with Makefile
    needs: [reversion, setup_build_matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{fromJson(needs.setup_build_matrix.outputs.linux_matrix) }}
    steps:
    # Check cache for boost libraries
    - name: Cache Boost
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: |
          /home/runner/boost_1_76_0/stage
          /home/runner/boost_1_76_0/boost
        key: 'nix-boost-src-latest-py${{ matrix.python-version }}'
     
    # Checkout current commit
    - uses: actions/checkout@v2
    
    # Set up Python 
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # Link Python includes and libraries
    - name: Set up libraries for Python ${{ matrix.python-version }}
      run: |
        chmod 755 ./.github/action_helpers/*;
        ./.github/action_helpers/actions_linux_python_libs.sh ${{ matrix.python-version }}
    
    # Setup boost
    - name: Setup boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: ./.github/action_helpers/actions_linux_setup_boost.sh ${{ matrix.python-version }}
   

    - name: Link boost libraries
      run: ./.github/action_helpers/actions_linux_setup_libboost.sh ${{ matrix.python-version }} 

    - name: Compile CPP
      run: make PYTHON_VERSION=${{ matrix.python-version }} all

    - name: Zip built files # This would actually build your project, using zip for an example artifact
      run: zip --junk-paths markopy-linux-py${{ matrix.python-version }}.so.zip Markopy/src/CLI/markopy_cli.py bin/markopy.so /usr/local/lib/libboost_python*.so.1.76.0
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./markopy-linux-py${{ matrix.python-version }}.so.zip
        asset_name:   markopy-linux-py${{ matrix.python-version }}.so.zip
        asset_content_type: application/zip

  MSBuild: 
    name: Build All on Windows with MSBuild 
    needs: [reversion, setup_build_matrix]
    runs-on: windows-latest
    strategy:
        fail-fast: false
        max-parallel: 3
        matrix: 
          python-version: ${{ fromJson(needs.setup_build_matrix.outputs.windows_matrix) }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Link python libraries And clean boost ones
      run: .\.github\action_helpers\actions_windows_libpython.ps1 -pythonver ${{ matrix.python-version }}

    - name: Cache Boost
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.GITHUB_ACTION_WIN_PROJECT}}\boost
        key: 'windows-llibboost-1.76-${{ matrix.python-version }}'

    - name: Build Boost
      id: boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      uses: egor-tensin/build-boost@v1
      with:
        version: 1.76.0
        libraries: program_options python
        platform: x64
        configuration: Release

    - name: Rename boost static and dynamic libraries
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: .\.github\action_helpers\actions_windows_libboost.ps1 -pythonver ${{ matrix.python-version }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}

      run: |
        $env:PYTHON_PATH = "D:\a\python${{ matrix.python-version }}";
        $env:BOOST_ROOT = "${{env.GITHUB_ACTION_WIN_PROJECT}}\boost";
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Zip built files # This would actually build your project, using zip for an example artifact
      run: 
        powershell "Compress-Archive Markopy/src/CLI/markopy_cli.py,x64/Release/markopy.pyd,${{env.GITHUB_ACTION_WIN_PROJECT}}\boost\stage\lib\boost_python*.dll markopy-windows-py${{ matrix.python-version }}.pyd.zip"

    
    - name: Upload Markopy Release Assets
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./markopy-windows-py${{ matrix.python-version }}.pyd.zip
        asset_name:   markopy-windows-py${{ matrix.python-version }}.pyd.zip
        asset_content_type: application/zip

  #Integrity check on pull requests with sonar
  sonar:
    if: github.event_name == 'pull_request'
    name: Code Integrity Check with Sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          #ref: TODO: with dispatch input
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  clear_draft:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Clear Draft Releases
    steps:
      - name: Delete drafts
        uses: hugo19941994/delete-draft-releases@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}