name: Check, build and Release
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
env:
  
  # Environment variables for building strategy
  
  GITHUB_ACTION_WIN_PROJECT: D:\a\Markopy
  # Solution path
  SOLUTION_FILE_PATH: ./

  # Configuration type to build. Required for MSBuild
  BUILD_CONFIGURATION: Release

  # Include directory for MSBuild, python dependencies
  WIN_INC_DIR: C:\hostedtoolcache\windows\Python\*\

jobs:

  # Increment version depending on the action

  decide_version:
    name: Decide Next Version
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.core.outputs.bump }}
      branch: ${{ steps.core.outputs.branch }}
      prerelease: ${{ steps.core.outputs.prerelease }}
      draft: ${{ steps.core.outputs.draft }}

    steps:
    - uses: actions/checkout@v2
    - name: Decide versioning strategy
      id: core
      run: |
        chmod 755 ./.github/action_helpers/*;
        python3 ./.github/action_helpers/build.py version_bump

  reversion:
    needs: decide_version
    name: Bump Version & Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.tag_version.outputs.new_tag }} 
    steps:   

    - uses: actions/checkout@v2    
    
    # Only if its a push to master branch
    - name: Bump Version
      id: tag_version
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: ${{ needs.decide_version.outputs.bump }}
        VERBOSE: true
        RELEASE_BRANCHES: ${{ needs.decide_version.outputs.branch }}

    # Create a new release if its a push to master
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }} 
        release_name: Release v${{ steps.tag_version.outputs.new_tag }} 
        draft: ${{ needs.decide_version.outputs.draft }} 
        prerelease: ${{ needs.decide_version.outputs.prerelease }}


  # set the matrix output depending on the build type
  setup_build_matrix:
    name: Configure version matrix
    runs-on: ubuntu-latest
    outputs:
      windows_matrix: ${{ steps.core.outputs.windows_matrix }}
      windows_matrix_sep: ${{ steps.core.outputs.windows_matrix_sep }}
      linux_matrix: ${{ steps.core.outputs.linux_matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Configure Version Matrix for Python
      id: core
      run: python3 ./.github/action_helpers/build.py version_matrix
  


  build_linux:
    name: Build python libraries on linux with CMake
    needs: [reversion, setup_build_matrix]
    runs-on: ubuntu-latest
    container: ahakcil/markopy:0.5.0
    strategy:
      matrix:
        python-version: ${{fromJson(needs.setup_build_matrix.outputs.linux_matrix) }}
    steps:
    - uses: actions/checkout@v2
    - name: Compile CPP
      run: |
        ls -al; 
        cmake . -DPYTHON_VER=${{ matrix.python-version }} -DPARTIAL=1 -DB_LIBS=1 -DB_CUDA=1 -DPROJ_VERSION="${{ needs.reversion.outputs.tag }}" -DCMAKE_BUILD_TYPE=Release; 
        cmake --build . --config Release; 
        ls -alR out/;
        ls -al /usr/local/lib;

    - name: Zip built files # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip out/lib/markopy.so Markopy/src/CLI/markopy_cli.py  /usr/local/lib/libboost_python${{ matrix.python-version }}*so.1*
        zip --junk-paths cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip out/lib/cudamarkopy.so Markopy/src/CLI/markopy_cli.py  /usr/local/lib/libboost_python${{ matrix.python-version }}*so.1*
        zip --junk-paths libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip out/lib/libmarkov.so out/bin/markovp
        zip --junk-paths libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip out/lib/libcudamarkov.so out/bin/cudamarkovp
    
    - name: Upload LibMarkov
      if: matrix.python-version == '38'
      id: upload-release-asset-libmarkov
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} 
        asset_path: ./libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_name:   libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_content_type: application/zip

    - name: Upload LibCudaMarkov
      if: matrix.python-version == '38'
      id: upload-release-asset-libcudamarkov
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} 
        asset_path: ./libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_name:   libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_content_type: application/zip

    - name: Upload Markopy
      id: upload-release-asset-markopy
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_name:   markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_content_type: application/zip

    - name: Upload CudaMarkopy
      id: upload-release-asset-cudamarkopy
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_name:   cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_content_type: application/zip
    

  build_windows: 
    name: Build All on Windows with CMake 
    needs: [reversion, setup_build_matrix]
    runs-on: windows-latest
    strategy:
        fail-fast: false
        max-parallel: 4
        matrix: 
          #python-version: ${{ fromJson(needs.setup_build_matrix.outputs.windows_matrix) }}
          python-version-sep: ${{ fromJson(needs.setup_build_matrix.outputs.windows_matrix_sep) }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version-sep }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version-sep }}

    - name: Link python libraries And clean boost ones
      id: link_python
      run: .\.github\action_helpers\actions_windows_libpython.ps1 -pythonver ${{ matrix.python-version-sep }}

    - name: Cache Boost
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.GITHUB_ACTION_WIN_PROJECT}}\boost
        key: 'windows-boost-1.76-markopy-${{ matrix.python-version-sep }}'

    - name: Build Boost
      id: boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      uses: egor-tensin/build-boost@v1
      with:
        version: 1.76.0
        libraries: program_options python
        platform: x64
        configuration: Release

    - name: Rename boost static and dynamic libraries
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: .\.github\action_helpers\actions_windows_libboost.ps1 -pythonver ${{ matrix.python-version-sep }}

    # These work, but take a damn hour to complete, if only github actions allowed custom containers
    #- uses: Jimver/cuda-toolkit@v0.2.2
    #  id: cuda-toolkit
    #  with:
    #    cuda: '11.2.2'

    #- name: Cache Qt
    #  id: cache-qt
    #  uses: actions/cache@v1
    #  with:
    #    path: ../Qt
    #    key: ${{ runner.os }}-QtCache

    #- name: Install Qt
    #  uses: jurplel/install-qt-action@v2
    #  with:
    #    modules: 'qtwebengine'
    #    cached: ${{ steps.cache-qt.outputs.cache-hit }}


    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $env:PYTHON_PATH = "D:\a\python${{ matrix.python-version-sep }}";
        $env:BOOST_ROOT = "${{env.GITHUB_ACTION_WIN_PROJECT}}\boost";
        cmake . -DPYTHON_VER=${{ steps.link_python.outputs.python_ver}} -DPARTIAL=1 -DBOOST_VER="1.76.0" -DPROJ_VERSION="${{ needs.reversion.outputs.tag }}" -DCMAKE_BUILD_TYPE=MinSizeRel -DPY_DEV_PATH="D:\a\python${{ matrix.python-version-sep }}" 
        cmake --build . --config Release; 

    - name: Zip built files # This would actually build your project, using zip for an example artifact
      run: |
        dir .;
        dir out/;
        dir out/lib/Release;
        powershell "Compress-Archive Markopy\src\CLI\markopy_cli.py,out\lib\Release\markopy.pyd,${{env.GITHUB_ACTION_WIN_PROJECT}}\boost\stage\lib\boost_python*.dll markopy-${{ needs.reversion.outputs.tag }}-win64-py${{ steps.link_python.outputs.python_ver}}.pyd.zip"
        powershell "Compress-Archive out\lib\Release\markov.lib libmarkov-${{ needs.reversion.outputs.tag }}-win64.zip"
      
    - name: Upload LibMarkov
      if: matrix.python-version-sep == '3.8'
      id: upload-release-asset-libmarkov
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} 
        asset_path: ./libmarkov-${{ needs.reversion.outputs.tag }}-win64.zip
        asset_name:   libmarkov-${{ needs.reversion.outputs.tag }}-win64.zip
        asset_content_type: application/zip<

    - name: Upload Markopy
      id: upload-release-asset-markopy
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./markopy-${{ needs.reversion.outputs.tag }}-win64-py${{ steps.link_python.outputs.python_ver}}.pyd.zip
        asset_name:   markopy-${{ needs.reversion.outputs.tag }}-win64-py${{ steps.link_python.outputs.python_ver}}.pyd.zip
        asset_content_type: application/zip



  #Integrity check on pull requests with sonar
  sonar:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Code Integrity Check with Sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          #ref: TODO: with dispatch input
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  clear_draft:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Clear Draft Releases
    steps:
      - name: Delete drafts
        uses: hugo19941994/delete-draft-releases@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}