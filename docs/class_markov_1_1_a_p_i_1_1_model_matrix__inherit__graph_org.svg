<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Markov::API::ModelMatrix Pages: 1 -->
<svg width="488pt" height="2570pt"
 viewBox="0.00 0.00 488.00 2570.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2566)">
<title>Markov::API::ModelMatrix</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title="Class to flatten and reduce Markov::Model to a Matrix.">
<polygon fill="#bfbfbf" stroke="black" points="124,-1180.5 124,-1685.5 378,-1685.5 378,-1180.5 124,-1180.5"/>
<text text-anchor="middle" x="251" y="-1671.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::ModelMatrix</text>
<polyline fill="none" stroke="black" points="124,-1664.5 378,-1664.5 "/>
<text text-anchor="start" x="132" y="-1650.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char ** edgeMatrix</text>
<text text-anchor="start" x="132" y="-1637.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int ** valueMatrix</text>
<text text-anchor="start" x="132" y="-1624.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int matrixSize</text>
<text text-anchor="start" x="132" y="-1611.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char * matrixIndex</text>
<text text-anchor="start" x="132" y="-1598.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int * totalEdgeWeights</text>
<text text-anchor="start" x="132" y="-1585.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool ready</text>
<polyline fill="none" stroke="black" points="124,-1578.5 378,-1578.5 "/>
<text text-anchor="start" x="132" y="-1564.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ModelMatrix()</text>
<text text-anchor="start" x="132" y="-1551.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool ConstructMatrix()</text>
<text text-anchor="start" x="132" y="-1538.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void DumpJSON()</text>
<text text-anchor="start" x="132" y="-1525.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ int FastRandomWalk</text>
<text text-anchor="start" x="132" y="-1512.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="132" y="-1499.9" font-family="Helvetica,sans-Serif" font-size="12.00"> const char *wordlistFileName,</text>
<text text-anchor="start" x="132" y="-1486.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="132" y="-1473.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool bFileIO=true)</text>
<text text-anchor="start" x="132" y="-1460.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Import(const char</text>
<text text-anchor="start" x="132" y="-1447.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="132" y="-1434.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="132" y="-1421.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="132" y="-1408.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="132" y="-1395.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int FastRandomWalk</text>
<text text-anchor="start" x="132" y="-1382.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="132" y="-1369.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::ofstream *wordlist,</text>
<text text-anchor="start" x="132" y="-1356.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="132" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool</text>
<text text-anchor="start" x="132" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bFileIO=true)</text>
<text text-anchor="start" x="132" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkPartition</text>
<text text-anchor="start" x="132" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std::</text>
<text text-anchor="start" x="132" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="132" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="132" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, bool bFileIO, int threads)</text>
<text text-anchor="start" x="132" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkThread</text>
<text text-anchor="start" x="132" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std</text>
<text text-anchor="start" x="132" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="132" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="132" y="-1200.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, int id, bool bFileIO)</text>
<text text-anchor="start" x="132" y="-1187.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool DeallocateMatrix()</text>
</a>
</g>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="class_markov_1_1_a_p_i_1_1_c_u_d_a_1_1_c_u_d_a_model_matrix.html" target="_top" xlink:title="Extension of Markov::API::ModelMatrix which is modified to run on GPU devices.">
<polygon fill="none" stroke="black" points="0,-421.5 0,-1017.5 254,-1017.5 254,-421.5 0,-421.5"/>
<text text-anchor="start" x="8" y="-1003.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::CUDA::</text>
<text text-anchor="middle" x="127" y="-990.9" font-family="Helvetica,sans-Serif" font-size="12.00">CUDAModelMatrix</text>
<polyline fill="none" stroke="black" points="0,-983.5 254,-983.5 "/>
<text text-anchor="start" x="8" y="-969.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * device_edgeMatrix</text>
<text text-anchor="start" x="8" y="-956.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * device_valueMatrix</text>
<text text-anchor="start" x="8" y="-943.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * device_matrixIndex</text>
<text text-anchor="start" x="8" y="-930.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * device_totalEdge</text>
<text text-anchor="start" x="8" y="-917.9" font-family="Helvetica,sans-Serif" font-size="12.00">Weights</text>
<text text-anchor="start" x="8" y="-904.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char ** device_outputBuffer</text>
<text text-anchor="start" x="8" y="-891.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char ** outputBuffer</text>
<text text-anchor="start" x="8" y="-878.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * flatEdgeMatrix</text>
<text text-anchor="start" x="8" y="-865.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * flatValueMatrix</text>
<text text-anchor="start" x="8" y="-852.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaBlocks</text>
<text text-anchor="start" x="8" y="-839.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaThreads</text>
<text text-anchor="start" x="8" y="-826.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int iterationsPerKernelThread</text>
<text text-anchor="start" x="8" y="-813.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int totalOutputPerSync</text>
<text text-anchor="start" x="8" y="-800.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int totalOutputPerKernel</text>
<text text-anchor="start" x="8" y="-787.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int numberOfPartitions</text>
<text text-anchor="start" x="8" y="-774.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaGridSize</text>
<text text-anchor="start" x="8" y="-761.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaMemPerGrid</text>
<text text-anchor="start" x="8" y="-748.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int cudaPerKernelAllocationSize</text>
<text text-anchor="start" x="8" y="-735.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int alternatingKernels</text>
<text text-anchor="start" x="8" y="-722.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; unsigned long ** device</text>
<text text-anchor="start" x="8" y="-709.9" font-family="Helvetica,sans-Serif" font-size="12.00">_seeds</text>
<text text-anchor="start" x="8" y="-696.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; cudaStream_t * cudastreams</text>
<polyline fill="none" stroke="black" points="0,-689.5 254,-689.5 "/>
<text text-anchor="start" x="8" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void MigrateMatrix()</text>
<text text-anchor="start" x="8" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void FlattenMatrix()</text>
<text text-anchor="start" x="8" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void FastRandom</text>
<text text-anchor="start" x="8" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00">Walk(unsigned long int</text>
<text text-anchor="start" x="8" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00"> n, const char *wordlistFileName,</text>
<text text-anchor="start" x="8" y="-610.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen, int maxLen, bool</text>
<text text-anchor="start" x="8" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bFileIO, bool bInfinite)</text>
<text text-anchor="start" x="8" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ char * AllocVRAMOutput</text>
<text text-anchor="start" x="8" y="-571.9" font-family="Helvetica,sans-Serif" font-size="12.00">Buffer(long int n, long int</text>
<text text-anchor="start" x="8" y="-558.9" font-family="Helvetica,sans-Serif" font-size="12.00"> singleGenMaxLen, long int CUDAKernel</text>
<text text-anchor="start" x="8" y="-545.9" font-family="Helvetica,sans-Serif" font-size="12.00">GridSize, long int sizePerGrid)</text>
<text text-anchor="start" x="8" y="-532.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void LaunchAsync</text>
<text text-anchor="start" x="8" y="-519.9" font-family="Helvetica,sans-Serif" font-size="12.00">Kernel(int kernelID, int</text>
<text text-anchor="start" x="8" y="-506.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
<text text-anchor="start" x="8" y="-493.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void prepKernel</text>
<text text-anchor="start" x="8" y="-480.9" font-family="Helvetica,sans-Serif" font-size="12.00">MemoryChannel(int numberOfStreams)</text>
<text text-anchor="start" x="8" y="-467.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void GatherAsync</text>
<text text-anchor="start" x="8" y="-454.9" font-family="Helvetica,sans-Serif" font-size="12.00">KernelOutput(int kernelID,</text>
<text text-anchor="start" x="8" y="-441.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bFileIO, std::ofstream</text>
<text text-anchor="start" x="8" y="-428.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &amp;wordlist)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node1&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M205.42,-1170.49C196.75,-1120.73 187.62,-1068.32 178.77,-1017.55"/>
<polygon fill="none" stroke="midnightblue" points="201.99,-1171.15 207.15,-1180.4 208.88,-1169.95 201.99,-1171.15"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="class_python_1_1_markopy_1_1_model_matrix.html" target="_top" xlink:title="Abstract representation of a matrix based model.">
<polygon fill="none" stroke="black" points="249.5,-1054.5 249.5,-1143.5 438.5,-1143.5 438.5,-1054.5 249.5,-1054.5"/>
<text text-anchor="middle" x="344" y="-1129.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrix</text>
<polyline fill="none" stroke="black" points="249.5,-1122.5 438.5,-1122.5 "/>
<text text-anchor="middle" x="344" y="-1108.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="249.5,-1101.5 438.5,-1101.5 "/>
<text text-anchor="start" x="257.5" y="-1087.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def FastRandomWalk</text>
<text text-anchor="start" x="257.5" y="-1074.9" font-family="Helvetica,sans-Serif" font-size="12.00">(int count, str wordlist,</text>
<text text-anchor="start" x="257.5" y="-1061.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minlen, int maxlen)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node7 -->
<g id="edge6" class="edge">
<title>Node1&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M324.24,-1170.53C326.94,-1160.9 329.46,-1151.92 331.73,-1143.81"/>
<polygon fill="none" stroke="midnightblue" points="320.81,-1169.79 321.49,-1180.37 327.56,-1171.68 320.81,-1169.79"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="class_markov_1_1_a_p_i_1_1_markov_passwords.html" target="_top" xlink:title="Markov::Model with char represented nodes.">
<polygon fill="none" stroke="black" points="103.5,-1722.5 103.5,-2162.5 398.5,-2162.5 398.5,-1722.5 103.5,-1722.5"/>
<text text-anchor="middle" x="251" y="-2148.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::MarkovPasswords</text>
<polyline fill="none" stroke="black" points="103.5,-2141.5 398.5,-2141.5 "/>
<text text-anchor="start" x="111.5" y="-2127.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ifstream * datasetFile</text>
<text text-anchor="start" x="111.5" y="-2114.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * modelSavefile</text>
<text text-anchor="start" x="111.5" y="-2101.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * outputFile</text>
<polyline fill="none" stroke="black" points="103.5,-2094.5 398.5,-2094.5 "/>
<text text-anchor="start" x="111.5" y="-2080.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords()</text>
<text text-anchor="start" x="111.5" y="-2067.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords(const</text>
<text text-anchor="start" x="111.5" y="-2054.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *filename)</text>
<text text-anchor="start" x="111.5" y="-2041.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ifstream * OpenDataset</text>
<text text-anchor="start" x="111.5" y="-2028.9" font-family="Helvetica,sans-Serif" font-size="12.00">File(const char *filename)</text>
<text text-anchor="start" x="111.5" y="-2015.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="111.5" y="-2002.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="111.5" y="-1989.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="111.5" y="-1976.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ofstream * Save</text>
<text text-anchor="start" x="111.5" y="-1963.9" font-family="Helvetica,sans-Serif" font-size="12.00">(const char *filename)</text>
<text text-anchor="start" x="111.5" y="-1950.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Generate(unsigned</text>
<text text-anchor="start" x="111.5" y="-1937.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, const char</text>
<text text-anchor="start" x="111.5" y="-1924.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *wordlistFileName, int</text>
<text text-anchor="start" x="111.5" y="-1911.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen=6, int maxLen=12,</text>
<text text-anchor="start" x="111.5" y="-1898.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int threads=20)</text>
<text text-anchor="start" x="111.5" y="-1885.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Buff(const char</text>
<text text-anchor="start" x="111.5" y="-1872.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *str, double multiplier,</text>
<text text-anchor="start" x="111.5" y="-1859.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bDontAdjustSelfLoops</text>
<text text-anchor="start" x="111.5" y="-1846.9" font-family="Helvetica,sans-Serif" font-size="12.00">=true, bool bDontAdjustExtendedLoops=false)</text>
<text text-anchor="start" x="111.5" y="-1833.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void TrainThread(Markov</text>
<text text-anchor="start" x="111.5" y="-1820.9" font-family="Helvetica,sans-Serif" font-size="12.00">::API::Concurrency::ThreadShared</text>
<text text-anchor="start" x="111.5" y="-1807.9" font-family="Helvetica,sans-Serif" font-size="12.00">ListHandler *listhandler, char</text>
<text text-anchor="start" x="111.5" y="-1794.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter)</text>
<text text-anchor="start" x="111.5" y="-1781.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void GenerateThread</text>
<text text-anchor="start" x="111.5" y="-1768.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *outputLock,</text>
<text text-anchor="start" x="111.5" y="-1755.9" font-family="Helvetica,sans-Serif" font-size="12.00"> unsigned long int n, std</text>
<text text-anchor="start" x="111.5" y="-1742.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, int</text>
<text text-anchor="start" x="111.5" y="-1729.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M251,-1712.02C251,-1703.32 251,-1694.57 251,-1685.83"/>
<polygon fill="none" stroke="midnightblue" points="247.5,-1712.22 251,-1722.22 254.5,-1712.22 247.5,-1712.22"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="class_markov_1_1_model.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="145,-2199.5 145,-2561.5 357,-2561.5 357,-2199.5 145,-2199.5"/>
<text text-anchor="middle" x="251" y="-2547.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::Model&lt; char &gt;</text>
<polyline fill="none" stroke="black" points="145,-2540.5 357,-2540.5 "/>
<text text-anchor="start" x="153" y="-2526.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::map&lt; char, Node</text>
<text text-anchor="start" x="153" y="-2513.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; nodes</text>
<text text-anchor="start" x="153" y="-2500.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; Node&lt; char &gt; * starterNode</text>
<text text-anchor="start" x="153" y="-2487.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="153" y="-2474.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; edges</text>
<polyline fill="none" stroke="black" points="145,-2467.5 357,-2467.5 "/>
<text text-anchor="start" x="153" y="-2453.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Model()</text>
<text text-anchor="start" x="153" y="-2440.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ char * RandomWalk(Markov</text>
<text text-anchor="start" x="153" y="-2427.9" font-family="Helvetica,sans-Serif" font-size="12.00">::Random::RandomEngine</text>
<text text-anchor="start" x="153" y="-2414.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *randomEngine, int minSetting,</text>
<text text-anchor="start" x="153" y="-2401.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxSetting, char *buffer)</text>
<text text-anchor="start" x="153" y="-2388.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void AdjustEdge(const</text>
<text text-anchor="start" x="153" y="-2375.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *payload, long</text>
<text text-anchor="start" x="153" y="-2362.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int occurrence)</text>
<text text-anchor="start" x="153" y="-2349.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(std::ifstream *)</text>
<text text-anchor="start" x="153" y="-2336.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(const char</text>
<text text-anchor="start" x="153" y="-2323.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="153" y="-2310.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(std::ofstream *)</text>
<text text-anchor="start" x="153" y="-2297.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(const char</text>
<text text-anchor="start" x="153" y="-2284.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="153" y="-2271.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Node&lt; char &gt; * StarterNode()</text>
<text text-anchor="start" x="153" y="-2258.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="153" y="-2245.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; * Edges()</text>
<text text-anchor="start" x="153" y="-2232.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::map&lt; char, Node</text>
<text text-anchor="start" x="153" y="-2219.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; * Nodes()</text>
<text text-anchor="start" x="153" y="-2206.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void OptimizeEdgeOrder()</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M251,-2189.11C251,-2180.38 251,-2171.58 251,-2162.79"/>
<polygon fill="none" stroke="midnightblue" points="247.5,-2189.33 251,-2199.33 254.5,-2189.33 247.5,-2189.33"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_model_matrix_c_l_i.html" target="_top" xlink:title="Python CLI wrapper for CudaModelMatrix.">
<polygon fill="none" stroke="black" points="45.5,-191.5 45.5,-345.5 258.5,-345.5 258.5,-191.5 45.5,-191.5"/>
<text text-anchor="start" x="53.5" y="-331.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaModel</text>
<text text-anchor="middle" x="152" y="-318.9" font-family="Helvetica,sans-Serif" font-size="12.00">MatrixCLI</text>
<polyline fill="none" stroke="black" points="45.5,-311.5 258.5,-311.5 "/>
<text text-anchor="start" x="53.5" y="-297.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="53.5" y="-284.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bInfinite</text>
<polyline fill="none" stroke="black" points="45.5,-277.5 258.5,-277.5 "/>
<text text-anchor="start" x="53.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self)</text>
<text text-anchor="start" x="53.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="53.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="53.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="53.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="53.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node4&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M144.12,-411.02C145.43,-387.47 146.66,-365.33 147.75,-345.88"/>
<polygon fill="none" stroke="midnightblue" points="140.62,-411.02 143.55,-421.2 147.6,-411.41 140.62,-411.02"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_markopy_c_l_i.html" target="_top" xlink:title="CUDA extension to MarkopyCLI.">
<polygon fill="none" stroke="black" points="140,-0.5 140,-115.5 388,-115.5 388,-0.5 140,-0.5"/>
<text text-anchor="middle" x="264" y="-101.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaMarkopyCLI</text>
<polyline fill="none" stroke="black" points="140,-94.5 388,-94.5 "/>
<text text-anchor="start" x="148" y="-80.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="148" y="-67.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="140,-60.5 388,-60.5 "/>
<text text-anchor="start" x="148" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ None __init__(self)</text>
<text text-anchor="start" x="148" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="148" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="148" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node5&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M197.68,-182.46C209.76,-159.98 222.5,-136.26 233.55,-115.68"/>
<polygon fill="none" stroke="midnightblue" points="194.56,-180.88 192.91,-191.34 200.73,-184.19 194.56,-180.88"/>
</g>
<!-- Node8 -->
<g id="node8" class="node">
<title>Node8</title>
<g id="a_node8"><a xlink:href="class_python_1_1_markopy_1_1_model_matrix_c_l_i.html" target="_top" xlink:title="Extension of Python.Markopy.Base.BaseCLI for Markov::API::ModelMatrix.">
<polygon fill="none" stroke="black" points="272,-642.5 272,-796.5 480,-796.5 480,-642.5 272,-642.5"/>
<text text-anchor="middle" x="376" y="-782.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrixCLI</text>
<polyline fill="none" stroke="black" points="272,-775.5 480,-775.5 "/>
<text text-anchor="start" x="280" y="-761.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="280" y="-748.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ fileIO</text>
<polyline fill="none" stroke="black" points="272,-741.5 480,-741.5 "/>
<text text-anchor="start" x="280" y="-727.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="280" y="-714.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="280" y="-701.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="280" y="-688.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="280" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="280" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="280" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node7&#45;&gt;Node8 -->
<g id="edge7" class="edge">
<title>Node7&#45;&gt;Node8</title>
<path fill="none" stroke="midnightblue" d="M348.55,-1044.33C354.04,-979.54 363.31,-870.17 369.54,-796.68"/>
<polygon fill="none" stroke="midnightblue" points="345.06,-1044.07 347.7,-1054.33 352.03,-1044.66 345.06,-1044.07"/>
</g>
<!-- Node8&#45;&gt;Node5 -->
<g id="edge8" class="edge">
<title>Node8&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M350.27,-632.79C330.36,-571.86 299.99,-489.09 263,-421 249.07,-395.36 231.31,-369.13 214.11,-345.85"/>
<polygon fill="none" stroke="midnightblue" points="346.97,-633.95 353.38,-642.38 353.62,-631.79 346.97,-633.95"/>
</g>
<!-- Node9 -->
<g id="node9" class="node">
<title>Node9</title>
<g id="a_node9"><a xlink:href="class_python_1_1_markopy_1_1_markopy_c_l_i.html" target="_top" xlink:title="Top level model selector for Markopy CLI.">
<polygon fill="none" stroke="black" points="276.5,-152.5 276.5,-384.5 475.5,-384.5 475.5,-152.5 276.5,-152.5"/>
<text text-anchor="middle" x="376" y="-370.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkopyCLI</text>
<polyline fill="none" stroke="black" points="276.5,-363.5 475.5,-363.5 "/>
<text text-anchor="start" x="284.5" y="-349.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="284.5" y="-336.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="276.5,-329.5 475.5,-329.5 "/>
<text text-anchor="start" x="284.5" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="284.5" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00"> add_help=False)</text>
<text text-anchor="start" x="284.5" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="284.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="284.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="284.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="284.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="284.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
<text text-anchor="start" x="284.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def process(self)</text>
<text text-anchor="start" x="284.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def stub(self)</text>
<text text-anchor="start" x="284.5" y="-185.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def evaluate(self,</text>
<text text-anchor="start" x="284.5" y="-172.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str filename)</text>
<text text-anchor="start" x="284.5" y="-159.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments(sel)</text>
</a>
</g>
</g>
<!-- Node8&#45;&gt;Node9 -->
<g id="edge9" class="edge">
<title>Node8&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M376,-632.18C376,-561.9 376,-462.05 376,-384.9"/>
<polygon fill="none" stroke="midnightblue" points="372.5,-632.33 376,-642.33 379.5,-632.33 372.5,-632.33"/>
</g>
<!-- Node9&#45;&gt;Node6 -->
<g id="edge10" class="edge">
<title>Node9&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M309.33,-143.38C304.16,-133.76 299.11,-124.37 294.38,-115.56"/>
<polygon fill="none" stroke="midnightblue" points="306.29,-145.12 314.1,-152.27 312.45,-141.81 306.29,-145.12"/>
</g>
</g>
</svg>
