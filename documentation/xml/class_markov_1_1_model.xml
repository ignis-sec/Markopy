<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_markov_1_1_model" kind="class" language="C++" prot="public">
    <compoundname>Markov::Model</compoundname>
    <includes refid="model_8h" local="no">model.h</includes>
    <templateparamlist>
      <param>
        <type>typename NodeStorageType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_markov_1_1_model_1aa772f79f444c2971f615df7be5e28bca" prot="private" static="no" mutable="no">
        <type>std::map&lt; NodeStorageType, <ref refid="class_markov_1_1_node" kindref="compound">Node</ref>&lt; NodeStorageType &gt; * &gt;</type>
        <definition>std::map&lt;NodeStorageType, Node&lt;NodeStorageType&gt;*&gt; Markov::Model&lt; NodeStorageType &gt;::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
<para>Map LeftNode is the Nodes NodeValue Map RightNode is the node pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="88" column="10" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_model_1ad2d9bf601df78f80076f5d3fbb65fe28" prot="private" static="no" mutable="no">
        <type><ref refid="class_markov_1_1_node" kindref="compound">Node</ref>&lt; NodeStorageType &gt; *</type>
        <definition>Node&lt;NodeStorageType&gt;* Markov::Model&lt; NodeStorageType &gt;::starterNode</definition>
        <argsstring></argsstring>
        <name>starterNode</name>
        <briefdescription>
<para>Starter <ref refid="class_markov_1_1_node" kindref="compound">Node</ref> of this model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="91" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_model_1a06d54b6e00a7e92b2c3bf72e1bfa560a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>&lt; NodeStorageType &gt; * &gt;</type>
        <definition>std::vector&lt;Edge&lt;NodeStorageType&gt;*&gt; Markov::Model&lt; NodeStorageType &gt;::edges</definition>
        <argsstring></argsstring>
        <name>edges</name>
        <briefdescription>
<para>A list of all edges in this model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="95" column="13" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_model_1ac13d29bfd4c08c9b2c00f7b54d53d421" prot="private" static="no" mutable="no">
        <type>std::default_random_engine *</type>
        <definition>std::default_random_engine* Markov::Model&lt; NodeStorageType &gt;::generator</definition>
        <argsstring></argsstring>
        <name>generator</name>
        <briefdescription>
<para>A default generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="98" column="28" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_model_1a4c41020aab865272c4c65d4110c9dad6" prot="private" static="no" mutable="no">
        <type>std::uniform_int_distribution&lt; long unsigned &gt;</type>
        <definition>std::uniform_int_distribution&lt;long unsigned&gt; Markov::Model&lt; NodeStorageType &gt;::distribution</definition>
        <argsstring></argsstring>
        <name>distribution</name>
        <briefdescription>
<para>A uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="101" column="31" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_markov_1_1_model_1ae1d564c132cbf681f10f8ed0dfc772df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Markov::Model&lt; NodeStorageType &gt;::Model</definition>
        <argsstring>()</argsstring>
        <name>Model</name>
        <briefdescription>
<para>Initialize a model with only start and end nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="1" column="0" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a2e0249e4630353a260e06b8f3a72f5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeStorageType *</type>
        <definition>NodeStorageType * Markov::Model&lt; NodeStorageType &gt;::RandomWalk</definition>
        <argsstring>()</argsstring>
        <name>RandomWalk</name>
        <briefdescription>
<para>Do a random walk on this model. Start from the starter node, invoke RandomNext on current node until terminator node is reached. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Null terminated string that was generated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="37" column="17" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="96" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1ad252913f83fa3eb14cc3f9f92c5ee37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Markov::Model&lt; NodeStorageType &gt;::AdjustEdge</definition>
        <argsstring>(const NodeStorageType *payload, long int occurrence)</argsstring>
        <name>AdjustEdge</name>
        <param>
          <type>const NodeStorageType *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>occurrence</declname>
        </param>
        <briefdescription>
<para>Adjust the model with a single string. Start from the starter node, and for each character, AdjustEdge the edge EdgeWeight from current node to the next, until NULL character is reached. Then, update the edge EdgeWeight from current node, to the terminator node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>- String that is passed from the training, and will be used to AdjustEdge the model with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occurrence</parametername>
</parameternamelist>
<parameterdescription>
<para>- Occurrence of this string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="45" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="122" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a379ea9943f9d4c212e1140d4a9af64f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Model&lt; NodeStorageType &gt;::Import</definition>
        <argsstring>(std::ifstream *)</argsstring>
        <name>Import</name>
        <param>
          <type>std::ifstream *</type>
          <defname>f</defname>
        </param>
        <briefdescription>
<para>Import a file to construct the model. </para>
        </briefdescription>
        <detaileddescription>
<para>File contains a list of edges. Format is: Left_repr;EdgeWeight;right_repr Iterate over this list, and construct nodes and edges accordingly. <simplesect kind="return"><para>True if successful, False for incomplete models or corrupt file formats </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="54" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="20" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a3f872a3af96a91d4627c1a5d5e66b19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Model&lt; NodeStorageType &gt;::Import</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>Import</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a file to import with filename, and call bool <ref refid="class_markov_1_1_model_1a379ea9943f9d4c212e1140d4a9af64f5" kindref="member">Model::Import</ref> with std::ifstream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful, False for incomplete models or corrupt file formats </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="59" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1ae16027a94235d2988ac4be35ea07d939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Model&lt; NodeStorageType &gt;::Export</definition>
        <argsstring>(std::ofstream *)</argsstring>
        <name>Export</name>
        <param>
          <type>std::ofstream *</type>
          <defname>f</defname>
        </param>
        <briefdescription>
<para>Export a file of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>File contains a list of edges. Format is: Left_repr;EdgeWeight;right_repr Iterate over this vertices, and their edges, and write them to file. <simplesect kind="return"><para>True if successful, False for incomplete models. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="68" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1af788426a3c41a7838a2aae199e8aef5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Model&lt; NodeStorageType &gt;::Export</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>Export</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a file to export with filename, and call bool <ref refid="class_markov_1_1_model_1ae16027a94235d2988ac4be35ea07d939" kindref="member">Model::Export</ref> with std::ofstream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful, False for incomplete models or corrupt file formats </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="73" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.cpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a35cb15a14d034f3365b9d2d3efa1ffc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_markov_1_1_node" kindref="compound">Node</ref>&lt; NodeStorageType &gt; *</type>
        <definition>Node&lt;NodeStorageType&gt;* Markov::Model&lt; NodeStorageType &gt;::StarterNode</definition>
        <argsstring>()</argsstring>
        <name>StarterNode</name>
        <briefdescription>
<para>Return starter <ref refid="class_markov_1_1_node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>starter node with 00 NodeValue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="78" column="6" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a2e08608905d7b042627ea844b08045fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>&lt; NodeStorageType &gt; * &gt; *</type>
        <definition>std::vector&lt;Edge&lt;NodeStorageType&gt;*&gt;* Markov::Model&lt; NodeStorageType &gt;::Edges</definition>
        <argsstring>()</argsstring>
        <name>Edges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="80" column="13" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_model_1a71f6df805e340ce96e9dc4ee4ebc6537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; NodeStorageType, <ref refid="class_markov_1_1_node" kindref="compound">Node</ref>&lt; NodeStorageType &gt; * &gt; *</type>
        <definition>std::map&lt;NodeStorageType, Node&lt;NodeStorageType&gt;*&gt;* Markov::Model&lt; NodeStorageType &gt;::Nodes</definition>
        <argsstring>()</argsstring>
        <name>Nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="82" column="10" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="82" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class for the final <ref refid="namespace_markov" kindref="compound">Markov</ref> <ref refid="class_markov_1_1_model" kindref="compound">Model</ref>, constructed from nodes and edges. </para>
    </briefdescription>
    <detaileddescription>
<para>This class will be <emphasis>templated later to work with other data types than char</emphasis>. </para>
    </detaileddescription>
    <location file="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" line="26" column="12" bodyfile="/media/ignis/HDD/Repositories/MarkovPasswords/MarkovModel/src/model.h" bodystart="26" bodyend="102"/>
    <listofallmembers>
      <member refid="class_markov_1_1_model_1ad252913f83fa3eb14cc3f9f92c5ee37a" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>AdjustEdge</name></member>
      <member refid="class_markov_1_1_model_1a4c41020aab865272c4c65d4110c9dad6" prot="private" virt="non-virtual"><scope>Markov::Model</scope><name>distribution</name></member>
      <member refid="class_markov_1_1_model_1a06d54b6e00a7e92b2c3bf72e1bfa560a" prot="private" virt="non-virtual"><scope>Markov::Model</scope><name>edges</name></member>
      <member refid="class_markov_1_1_model_1a2e08608905d7b042627ea844b08045fe" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Edges</name></member>
      <member refid="class_markov_1_1_model_1ae16027a94235d2988ac4be35ea07d939" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Export</name></member>
      <member refid="class_markov_1_1_model_1af788426a3c41a7838a2aae199e8aef5b" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Export</name></member>
      <member refid="class_markov_1_1_model_1ac13d29bfd4c08c9b2c00f7b54d53d421" prot="private" virt="non-virtual"><scope>Markov::Model</scope><name>generator</name></member>
      <member refid="class_markov_1_1_model_1a379ea9943f9d4c212e1140d4a9af64f5" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Import</name></member>
      <member refid="class_markov_1_1_model_1a3f872a3af96a91d4627c1a5d5e66b19a" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Import</name></member>
      <member refid="class_markov_1_1_model_1ae1d564c132cbf681f10f8ed0dfc772df" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Model</name></member>
      <member refid="class_markov_1_1_model_1a71f6df805e340ce96e9dc4ee4ebc6537" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>Nodes</name></member>
      <member refid="class_markov_1_1_model_1aa772f79f444c2971f615df7be5e28bca" prot="private" virt="non-virtual"><scope>Markov::Model</scope><name>nodes</name></member>
      <member refid="class_markov_1_1_model_1a2e0249e4630353a260e06b8f3a72f5bb" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>RandomWalk</name></member>
      <member refid="class_markov_1_1_model_1ad2d9bf601df78f80076f5d3fbb65fe28" prot="private" virt="non-virtual"><scope>Markov::Model</scope><name>starterNode</name></member>
      <member refid="class_markov_1_1_model_1a35cb15a14d034f3365b9d2d3efa1ffc0" prot="public" virt="non-virtual"><scope>Markov::Model</scope><name>StarterNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
