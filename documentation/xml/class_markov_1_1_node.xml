<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_markov_1_1_node" kind="class" language="C++" prot="public">
    <compoundname>Markov::Node</compoundname>
    <includes refid="node_8h" local="no">node.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_markov_1_1_node_1a149a7d0f09dbeb7df1ad91953c356ed6" prot="private" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char Markov::Node::_value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="73" column="15" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_node_1a948109a2529baba339026d93dd0928fd" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t Markov::Node::total_edge_weights</definition>
        <argsstring></argsstring>
        <name>total_edge_weights</name>
        <briefdescription>
<para>Character representation of this node. 0 for starter, 0xff for terminator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="75" column="10" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_node_1a36a8e798a20a6320e0e5ae2738ff00d0" prot="private" static="no" mutable="no">
        <type>std::map&lt; unsigned char, <ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> * &gt;</type>
        <definition>std::map&lt;unsigned char, Markov::Edge*&gt; Markov::Node::edges</definition>
        <argsstring></argsstring>
        <name>edges</name>
        <briefdescription>
<para>Total weights of the vertices, required by RandomNext;. </para>
        </briefdescription>
        <detaileddescription>
<para>A map of all edges connected to this node, where this node is at the left.</para>
<para>Map is indexed by unsigned char, which is the character representation of the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="81" column="10" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_markov_1_1_node_1aba8bb96b31d0f036d1831de9725585cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Markov::Node::Markov::Node</definition>
        <argsstring>()</argsstring>
        <name>Markov::Node</name>
        <briefdescription>
<para>Default constructor. Creates an empty <ref refid="class_markov_1_1_node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a01d11553e9eb43a545ea3e4dd7a8c88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Markov::Node::Markov::Node</definition>
        <argsstring>(unsigned char _value)</argsstring>
        <name>Markov::Node</name>
        <param>
          <type>unsigned char</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Constructor. Creates a <ref refid="class_markov_1_1_node" kindref="compound">Node</ref> with no edges and with given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Nodes character representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a7e5907628cba10dd188b91b12aee79fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
        <definition>Markov::Edge * Markov::Node::Link</definition>
        <argsstring>(Markov::Node *)</argsstring>
        <name>Link</name>
        <param>
          <type><ref refid="class_markov_1_1_node" kindref="compound">Markov::Node</ref> *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Link this node with another, with this node as its source. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- Target node which will be the right() of new edge. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new node with left as this, and right as parameter target. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="29" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a6e994decf4700b2c3f5e9cdea3d17ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
        <definition>Markov::Edge * Markov::Node::Link</definition>
        <argsstring>(Markov::Edge *)</argsstring>
        <name>Link</name>
        <param>
          <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Link this node with another, with this node as its source. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>DOES NOT</emphasis> create a new <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that will accept this node as its left. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the same edge as parameter target. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="37" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a4dd3cbabbdad85e8cb8319c4e2901874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_node" kindref="compound">Markov::Node</ref> *</type>
        <definition>Markov::Node * Markov::Node::RandomNext</definition>
        <argsstring>()</argsstring>
        <name>RandomNext</name>
        <briefdescription>
<para>Chose a random node from the list of edges, with regards to its weight, and traverse to that. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation is done by generating a random number in range of 0-this.total_edge_weights, and then iterating over the list of edges. At each step, weight of the edge is subtracted from the random number, and once it is 0, next node is selected. <simplesect kind="return"><para><ref refid="class_markov_1_1_node" kindref="compound">Node</ref> that was chosen at weight biased random. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="45" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="28" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a152af05fd4ecc276cf0f125cdb62faf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Node::UpdateEdges</definition>
        <argsstring>(Markov::Edge *)</argsstring>
        <name>UpdateEdges</name>
        <param>
          <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Insert a new edge to the this.edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>- New edge that will be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if insertion was successful, false if it fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="51" column="6" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a4361cd880979dfe2919d1e7a1cf4b84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
        <definition>Markov::Edge* Markov::Node::findEdge</definition>
        <argsstring>(char repr)</argsstring>
        <name>findEdge</name>
        <param>
          <type>char</type>
          <declname>repr</declname>
        </param>
        <briefdescription>
<para>Find an edge with its character representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repr</parametername>
</parameternamelist>
<parameterdescription>
<para>- character value of the target node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that is connected between this node, and the target node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="57" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a29a5636aa6724997c02b55c3d6f72336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref> *</type>
        <definition>Markov::Edge* Markov::Node::findEdge</definition>
        <argsstring>(Node *target)</argsstring>
        <name>findEdge</name>
        <param>
          <type><ref refid="class_markov_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Find an edge with its pointer. Avoid unless neccessary because comptutational cost of find by character is cheaper (because of std::map) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- target node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that is connected between this node, and the target node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="63" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1aaaacdb18a5683b5ec76206c2383554fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char Markov::Node::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
<para>Return character representation of this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>character representation at _value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="68" column="15" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node class that for the vertices of model. Connected with eachother using <ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This class will <emphasis>later be templated to accept other data types than char</emphasis>. </para>
    </detaileddescription>
    <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="12" column="1" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="12" bodyend="82"/>
    <listofallmembers>
      <member refid="class_markov_1_1_node_1a149a7d0f09dbeb7df1ad91953c356ed6" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>_value</name></member>
      <member refid="class_markov_1_1_node_1a36a8e798a20a6320e0e5ae2738ff00d0" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>edges</name></member>
      <member refid="class_markov_1_1_node_1a4361cd880979dfe2919d1e7a1cf4b84e" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>findEdge</name></member>
      <member refid="class_markov_1_1_node_1a29a5636aa6724997c02b55c3d6f72336" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>findEdge</name></member>
      <member refid="class_markov_1_1_node_1a7e5907628cba10dd188b91b12aee79fd" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Link</name></member>
      <member refid="class_markov_1_1_node_1a6e994decf4700b2c3f5e9cdea3d17ef8" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Link</name></member>
      <member refid="class_markov_1_1_node_1aba8bb96b31d0f036d1831de9725585cf" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Markov::Node</name></member>
      <member refid="class_markov_1_1_node_1a01d11553e9eb43a545ea3e4dd7a8c88e" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Markov::Node</name></member>
      <member refid="class_markov_1_1_node_1a4dd3cbabbdad85e8cb8319c4e2901874" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>RandomNext</name></member>
      <member refid="class_markov_1_1_node_1a948109a2529baba339026d93dd0928fd" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>total_edge_weights</name></member>
      <member refid="class_markov_1_1_node_1a152af05fd4ecc276cf0f125cdb62faf9" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>UpdateEdges</name></member>
      <member refid="class_markov_1_1_node_1aaaacdb18a5683b5ec76206c2383554fd" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
