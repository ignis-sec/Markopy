<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Python.Markopy.ModelMatrixCLI Pages: 1 -->
<svg width="511pt" height="2089pt"
 viewBox="0.00 0.00 511.00 2089.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2085)">
<title>Python.Markopy.ModelMatrixCLI</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title="Extension of Python.Markopy.Base.BaseCLI for Markov::API::ModelMatrix.">
<polygon fill="#bfbfbf" stroke="black" points="126.5,-382.5 126.5,-536.5 334.5,-536.5 334.5,-382.5 126.5,-382.5"/>
<text text-anchor="middle" x="230.5" y="-522.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrixCLI</text>
<polyline fill="none" stroke="black" points="126.5,-515.5 334.5,-515.5 "/>
<text text-anchor="start" x="134.5" y="-501.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="134.5" y="-488.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ fileIO</text>
<polyline fill="none" stroke="black" points="126.5,-481.5 334.5,-481.5 "/>
<text text-anchor="start" x="134.5" y="-467.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="134.5" y="-454.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="134.5" y="-441.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="134.5" y="-428.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="134.5" y="-415.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="134.5" y="-402.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="134.5" y="-389.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node8 -->
<g id="node8" class="node">
<title>Node8</title>
<g id="a_node8"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_model_matrix_c_l_i.html" target="_top" xlink:title="Python CLI wrapper for CudaModelMatrix.">
<polygon fill="none" stroke="black" points="16,-172 16,-326 229,-326 229,-172 16,-172"/>
<text text-anchor="start" x="24" y="-312.4" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaModel</text>
<text text-anchor="middle" x="122.5" y="-299.4" font-family="Helvetica,sans-Serif" font-size="12.00">MatrixCLI</text>
<polyline fill="none" stroke="black" points="16,-292 229,-292 "/>
<text text-anchor="start" x="24" y="-278.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="24" y="-265.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ bInfinite</text>
<polyline fill="none" stroke="black" points="16,-258 229,-258 "/>
<text text-anchor="start" x="24" y="-244.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self)</text>
<text text-anchor="start" x="24" y="-231.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="24" y="-218.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="24" y="-205.4" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="24" y="-192.4" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="24" y="-179.4" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node8 -->
<g id="edge7" class="edge">
<title>Node1&#45;&gt;Node8</title>
<path fill="none" stroke="midnightblue" d="M186.35,-373.26C178.29,-357.71 169.93,-341.57 162.02,-326.3"/>
<polygon fill="none" stroke="midnightblue" points="183.34,-375.07 191.05,-382.34 189.56,-371.85 183.34,-375.07"/>
</g>
<!-- Node10 -->
<g id="node10" class="node">
<title>Node10</title>
<g id="a_node10"><a xlink:href="class_python_1_1_markopy_1_1_markopy_c_l_i.html" target="_top" xlink:title="Top level model selector for Markopy CLI.">
<polygon fill="none" stroke="black" points="246.5,-152.5 246.5,-345.5 432.5,-345.5 432.5,-152.5 246.5,-152.5"/>
<text text-anchor="middle" x="339.5" y="-331.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkopyCLI</text>
<polyline fill="none" stroke="black" points="246.5,-324.5 432.5,-324.5 "/>
<text text-anchor="start" x="254.5" y="-310.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="254.5" y="-297.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="246.5,-290.5 432.5,-290.5 "/>
<text text-anchor="start" x="254.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="254.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00"> add_help=False)</text>
<text text-anchor="start" x="254.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="254.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="254.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="254.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="254.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="254.5" y="-185.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
<text text-anchor="start" x="254.5" y="-172.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def process(self)</text>
<text text-anchor="start" x="254.5" y="-159.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def stub(self)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node10 -->
<g id="edge9" class="edge">
<title>Node1&#45;&gt;Node10</title>
<path fill="none" stroke="midnightblue" d="M275.01,-373.35C279.75,-364.29 284.59,-355.03 289.39,-345.85"/>
<polygon fill="none" stroke="midnightblue" points="271.85,-371.86 270.31,-382.34 278.05,-375.1 271.85,-371.86"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="class_python_1_1_markopy_1_1_abstract_generation_model_c_l_i.html" target="_top" xlink:title="abstract class for generation capable models">
<polygon fill="none" stroke="black" points="0,-580 0,-656 233,-656 233,-580 0,-580"/>
<text text-anchor="start" x="8" y="-642.4" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.AbstractGeneration</text>
<text text-anchor="middle" x="116.5" y="-629.4" font-family="Helvetica,sans-Serif" font-size="12.00">ModelCLI</text>
<polyline fill="none" stroke="black" points="0,-622 233,-622 "/>
<text text-anchor="middle" x="116.5" y="-608.4" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="0,-601 233,-601 "/>
<text text-anchor="start" x="8" y="-587.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M149.47,-571.74C157.48,-560.75 166.25,-548.7 174.98,-536.72"/>
<polygon fill="none" stroke="midnightblue" points="146.58,-569.77 143.52,-579.91 152.23,-573.89 146.58,-569.77"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="class_python_1_1_markopy_1_1_base_c_l_i.html" target="_top" xlink:title="Base CLI class to handle user interactions">
<polygon fill="none" stroke="black" points="5,-719 5,-1185 210,-1185 210,-719 5,-719"/>
<text text-anchor="middle" x="107.5" y="-1171.4" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.BaseCLI</text>
<polyline fill="none" stroke="black" points="5,-1164 210,-1164 "/>
<text text-anchor="start" x="13" y="-1150.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ parser</text>
<text text-anchor="start" x="13" y="-1137.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ print_help</text>
<text text-anchor="start" x="13" y="-1124.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="13" y="-1111.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<polyline fill="none" stroke="black" points="5,-1104 210,-1104 "/>
<text text-anchor="start" x="13" y="-1090.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="13" y="-1077.4" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="13" y="-1064.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="13" y="-1051.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="13" y="-1038.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="13" y="-1025.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="13" y="-1012.4" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="13" y="-999.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_arguments</text>
<text text-anchor="start" x="13" y="-986.4" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="13" y="-973.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def import_model(self,</text>
<text text-anchor="start" x="13" y="-960.4" font-family="Helvetica,sans-Serif" font-size="12.00"> str filename)</text>
<text text-anchor="start" x="13" y="-947.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def train(self, str</text>
<text text-anchor="start" x="13" y="-934.4" font-family="Helvetica,sans-Serif" font-size="12.00"> dataset, str seperator,</text>
<text text-anchor="start" x="13" y="-921.4" font-family="Helvetica,sans-Serif" font-size="12.00"> str output, bool output</text>
<text text-anchor="start" x="13" y="-908.4" font-family="Helvetica,sans-Serif" font-size="12.00">_forced=False, bool bulk=False)</text>
<text text-anchor="start" x="13" y="-895.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def export(self, str</text>
<text text-anchor="start" x="13" y="-882.4" font-family="Helvetica,sans-Serif" font-size="12.00"> filename)</text>
<text text-anchor="start" x="13" y="-869.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def generate(self,</text>
<text text-anchor="start" x="13" y="-856.4" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist, bool</text>
<text text-anchor="start" x="13" y="-843.4" font-family="Helvetica,sans-Serif" font-size="12.00"> bulk=False)</text>
<text text-anchor="start" x="13" y="-830.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def process(self)</text>
<text text-anchor="start" x="13" y="-817.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def check_import_path</text>
<text text-anchor="start" x="13" y="-804.4" font-family="Helvetica,sans-Serif" font-size="12.00">(str filename)</text>
<text text-anchor="start" x="13" y="-791.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def check_corpus_path</text>
<text text-anchor="start" x="13" y="-778.4" font-family="Helvetica,sans-Serif" font-size="12.00">(str filename)</text>
<text text-anchor="start" x="13" y="-765.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def check_export_path</text>
<text text-anchor="start" x="13" y="-752.4" font-family="Helvetica,sans-Serif" font-size="12.00">(str filename)</text>
<text text-anchor="start" x="13" y="-739.4" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="13" y="-726.4" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M114.08,-708.45C114.61,-688.71 115.1,-670.82 115.49,-656.31"/>
<polygon fill="none" stroke="midnightblue" points="110.57,-708.52 113.8,-718.61 117.57,-708.71 110.57,-708.52"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="class_python_1_1_markopy_1_1_model_matrix.html" target="_top" xlink:title="Abstract representation of a matrix based model.">
<polygon fill="none" stroke="black" points="256,-573.5 256,-662.5 445,-662.5 445,-573.5 256,-573.5"/>
<text text-anchor="middle" x="350.5" y="-648.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrix</text>
<polyline fill="none" stroke="black" points="256,-641.5 445,-641.5 "/>
<text text-anchor="middle" x="350.5" y="-627.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="256,-620.5 445,-620.5 "/>
<text text-anchor="start" x="264" y="-606.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def FastRandomWalk</text>
<text text-anchor="start" x="264" y="-593.9" font-family="Helvetica,sans-Serif" font-size="12.00">(int count, str wordlist,</text>
<text text-anchor="start" x="264" y="-580.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minlen, int maxlen)</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node1 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M310.95,-565.42C303.84,-556.15 296.3,-546.32 288.8,-536.53"/>
<polygon fill="none" stroke="midnightblue" points="308.21,-567.6 317.07,-573.41 313.77,-563.34 308.21,-567.6"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="class_markov_1_1_a_p_i_1_1_model_matrix.html" target="_top" xlink:title="Class to flatten and reduce Markov::Model to a Matrix.">
<polygon fill="none" stroke="black" points="228.5,-699.5 228.5,-1204.5 482.5,-1204.5 482.5,-699.5 228.5,-699.5"/>
<text text-anchor="middle" x="355.5" y="-1190.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::ModelMatrix</text>
<polyline fill="none" stroke="black" points="228.5,-1183.5 482.5,-1183.5 "/>
<text text-anchor="start" x="236.5" y="-1169.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char ** edgeMatrix</text>
<text text-anchor="start" x="236.5" y="-1156.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int ** valueMatrix</text>
<text text-anchor="start" x="236.5" y="-1143.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int matrixSize</text>
<text text-anchor="start" x="236.5" y="-1130.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char * matrixIndex</text>
<text text-anchor="start" x="236.5" y="-1117.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int * totalEdgeWeights</text>
<text text-anchor="start" x="236.5" y="-1104.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool ready</text>
<polyline fill="none" stroke="black" points="228.5,-1097.5 482.5,-1097.5 "/>
<text text-anchor="start" x="236.5" y="-1083.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ModelMatrix()</text>
<text text-anchor="start" x="236.5" y="-1070.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool ConstructMatrix()</text>
<text text-anchor="start" x="236.5" y="-1057.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void DumpJSON()</text>
<text text-anchor="start" x="236.5" y="-1044.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ int FastRandomWalk</text>
<text text-anchor="start" x="236.5" y="-1031.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="236.5" y="-1018.9" font-family="Helvetica,sans-Serif" font-size="12.00"> const char *wordlistFileName,</text>
<text text-anchor="start" x="236.5" y="-1005.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="236.5" y="-992.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool bFileIO=true)</text>
<text text-anchor="start" x="236.5" y="-979.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Import(const char</text>
<text text-anchor="start" x="236.5" y="-966.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="236.5" y="-953.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="236.5" y="-940.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="236.5" y="-927.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="236.5" y="-914.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int FastRandomWalk</text>
<text text-anchor="start" x="236.5" y="-901.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="236.5" y="-888.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::ofstream *wordlist,</text>
<text text-anchor="start" x="236.5" y="-875.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="236.5" y="-862.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool</text>
<text text-anchor="start" x="236.5" y="-849.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bFileIO=true)</text>
<text text-anchor="start" x="236.5" y="-836.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkPartition</text>
<text text-anchor="start" x="236.5" y="-823.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std::</text>
<text text-anchor="start" x="236.5" y="-810.9" font-family="Helvetica,sans-Serif" font-size="12.00">ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="236.5" y="-797.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="236.5" y="-784.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, bool bFileIO, int threads)</text>
<text text-anchor="start" x="236.5" y="-771.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkThread</text>
<text text-anchor="start" x="236.5" y="-758.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std</text>
<text text-anchor="start" x="236.5" y="-745.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="236.5" y="-732.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="236.5" y="-719.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, int id, bool bFileIO)</text>
<text text-anchor="start" x="236.5" y="-706.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool DeallocateMatrix()</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node4 -->
<g id="edge4" class="edge">
<title>Node5&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M351.56,-689.23C351.41,-679.71 351.28,-670.83 351.16,-662.81"/>
<polygon fill="none" stroke="midnightblue" points="348.06,-689.42 351.71,-699.37 355.06,-689.32 348.06,-689.42"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="class_markov_1_1_a_p_i_1_1_markov_passwords.html" target="_top" xlink:title="Markov::Model with char represented nodes.">
<polygon fill="none" stroke="black" points="208,-1241.5 208,-1681.5 503,-1681.5 503,-1241.5 208,-1241.5"/>
<text text-anchor="middle" x="355.5" y="-1667.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::MarkovPasswords</text>
<polyline fill="none" stroke="black" points="208,-1660.5 503,-1660.5 "/>
<text text-anchor="start" x="216" y="-1646.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ifstream * datasetFile</text>
<text text-anchor="start" x="216" y="-1633.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * modelSavefile</text>
<text text-anchor="start" x="216" y="-1620.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * outputFile</text>
<polyline fill="none" stroke="black" points="208,-1613.5 503,-1613.5 "/>
<text text-anchor="start" x="216" y="-1599.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords()</text>
<text text-anchor="start" x="216" y="-1586.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords(const</text>
<text text-anchor="start" x="216" y="-1573.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *filename)</text>
<text text-anchor="start" x="216" y="-1560.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ifstream * OpenDataset</text>
<text text-anchor="start" x="216" y="-1547.9" font-family="Helvetica,sans-Serif" font-size="12.00">File(const char *filename)</text>
<text text-anchor="start" x="216" y="-1534.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="216" y="-1521.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="216" y="-1508.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="216" y="-1495.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ofstream * Save</text>
<text text-anchor="start" x="216" y="-1482.9" font-family="Helvetica,sans-Serif" font-size="12.00">(const char *filename)</text>
<text text-anchor="start" x="216" y="-1469.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Generate(unsigned</text>
<text text-anchor="start" x="216" y="-1456.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, const char</text>
<text text-anchor="start" x="216" y="-1443.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *wordlistFileName, int</text>
<text text-anchor="start" x="216" y="-1430.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen=6, int maxLen=12,</text>
<text text-anchor="start" x="216" y="-1417.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int threads=20)</text>
<text text-anchor="start" x="216" y="-1404.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Buff(const char</text>
<text text-anchor="start" x="216" y="-1391.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *str, double multiplier,</text>
<text text-anchor="start" x="216" y="-1378.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bDontAdjustSelfLoops</text>
<text text-anchor="start" x="216" y="-1365.9" font-family="Helvetica,sans-Serif" font-size="12.00">=true, bool bDontAdjustExtendedLoops=false)</text>
<text text-anchor="start" x="216" y="-1352.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void TrainThread(Markov</text>
<text text-anchor="start" x="216" y="-1339.9" font-family="Helvetica,sans-Serif" font-size="12.00">::API::Concurrency::ThreadShared</text>
<text text-anchor="start" x="216" y="-1326.9" font-family="Helvetica,sans-Serif" font-size="12.00">ListHandler *listhandler, char</text>
<text text-anchor="start" x="216" y="-1313.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter)</text>
<text text-anchor="start" x="216" y="-1300.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void GenerateThread</text>
<text text-anchor="start" x="216" y="-1287.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *outputLock,</text>
<text text-anchor="start" x="216" y="-1274.9" font-family="Helvetica,sans-Serif" font-size="12.00"> unsigned long int n, std</text>
<text text-anchor="start" x="216" y="-1261.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, int</text>
<text text-anchor="start" x="216" y="-1248.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node5 -->
<g id="edge5" class="edge">
<title>Node6&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M355.5,-1231.02C355.5,-1222.32 355.5,-1213.57 355.5,-1204.83"/>
<polygon fill="none" stroke="midnightblue" points="352,-1231.22 355.5,-1241.22 359,-1231.22 352,-1231.22"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="class_markov_1_1_model.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="249.5,-1718.5 249.5,-2080.5 461.5,-2080.5 461.5,-1718.5 249.5,-1718.5"/>
<text text-anchor="middle" x="355.5" y="-2066.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::Model&lt; char &gt;</text>
<polyline fill="none" stroke="black" points="249.5,-2059.5 461.5,-2059.5 "/>
<text text-anchor="start" x="257.5" y="-2045.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::map&lt; char, Node</text>
<text text-anchor="start" x="257.5" y="-2032.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; nodes</text>
<text text-anchor="start" x="257.5" y="-2019.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; Node&lt; char &gt; * starterNode</text>
<text text-anchor="start" x="257.5" y="-2006.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="257.5" y="-1993.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; edges</text>
<polyline fill="none" stroke="black" points="249.5,-1986.5 461.5,-1986.5 "/>
<text text-anchor="start" x="257.5" y="-1972.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Model()</text>
<text text-anchor="start" x="257.5" y="-1959.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ char * RandomWalk(Markov</text>
<text text-anchor="start" x="257.5" y="-1946.9" font-family="Helvetica,sans-Serif" font-size="12.00">::Random::RandomEngine</text>
<text text-anchor="start" x="257.5" y="-1933.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *randomEngine, int minSetting,</text>
<text text-anchor="start" x="257.5" y="-1920.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxSetting, char *buffer)</text>
<text text-anchor="start" x="257.5" y="-1907.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void AdjustEdge(const</text>
<text text-anchor="start" x="257.5" y="-1894.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *payload, long</text>
<text text-anchor="start" x="257.5" y="-1881.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int occurrence)</text>
<text text-anchor="start" x="257.5" y="-1868.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(std::ifstream *)</text>
<text text-anchor="start" x="257.5" y="-1855.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(const char</text>
<text text-anchor="start" x="257.5" y="-1842.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="257.5" y="-1829.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(std::ofstream *)</text>
<text text-anchor="start" x="257.5" y="-1816.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(const char</text>
<text text-anchor="start" x="257.5" y="-1803.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="257.5" y="-1790.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Node&lt; char &gt; * StarterNode()</text>
<text text-anchor="start" x="257.5" y="-1777.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="257.5" y="-1764.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; * Edges()</text>
<text text-anchor="start" x="257.5" y="-1751.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::map&lt; char, Node</text>
<text text-anchor="start" x="257.5" y="-1738.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; * Nodes()</text>
<text text-anchor="start" x="257.5" y="-1725.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void OptimizeEdgeOrder()</text>
</a>
</g>
</g>
<!-- Node7&#45;&gt;Node6 -->
<g id="edge6" class="edge">
<title>Node7&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M355.5,-1708.11C355.5,-1699.38 355.5,-1690.58 355.5,-1681.79"/>
<polygon fill="none" stroke="midnightblue" points="352,-1708.33 355.5,-1718.33 359,-1708.33 352,-1708.33"/>
</g>
<!-- Node9 -->
<g id="node9" class="node">
<title>Node9</title>
<g id="a_node9"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_markopy_c_l_i.html" target="_top" xlink:title="CUDA extension to MarkopyCLI.">
<polygon fill="none" stroke="black" points="106.5,-0.5 106.5,-115.5 354.5,-115.5 354.5,-0.5 106.5,-0.5"/>
<text text-anchor="middle" x="230.5" y="-101.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaMarkopyCLI</text>
<polyline fill="none" stroke="black" points="106.5,-94.5 354.5,-94.5 "/>
<text text-anchor="start" x="114.5" y="-80.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="114.5" y="-67.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="106.5,-60.5 354.5,-60.5 "/>
<text text-anchor="start" x="114.5" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ None __init__(self)</text>
<text text-anchor="start" x="114.5" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="114.5" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="114.5" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
</a>
</g>
</g>
<!-- Node8&#45;&gt;Node9 -->
<g id="edge8" class="edge">
<title>Node8&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M171.02,-163.08C180.19,-147.04 189.57,-130.63 198.09,-115.72"/>
<polygon fill="none" stroke="midnightblue" points="167.88,-161.52 165.96,-171.94 173.96,-165 167.88,-161.52"/>
</g>
<!-- Node10&#45;&gt;Node9 -->
<g id="edge10" class="edge">
<title>Node10&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M279.28,-143.59C273.77,-134.03 268.34,-124.61 263.21,-115.72"/>
<polygon fill="none" stroke="midnightblue" points="276.33,-145.48 284.36,-152.39 282.4,-141.98 276.33,-145.48"/>
</g>
</g>
</svg>
