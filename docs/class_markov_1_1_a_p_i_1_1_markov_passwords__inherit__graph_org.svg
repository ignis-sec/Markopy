<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Markov::API::MarkovPasswords Pages: 1 -->
<svg width="636pt" height="2583pt"
 viewBox="0.00 0.00 635.50 2583.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2579)">
<title>Markov::API::MarkovPasswords</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title="Markov::Model with char represented nodes.">
<polygon fill="#bfbfbf" stroke="black" points="238.5,-1735.5 238.5,-2175.5 533.5,-2175.5 533.5,-1735.5 238.5,-1735.5"/>
<text text-anchor="middle" x="386" y="-2161.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::MarkovPasswords</text>
<polyline fill="none" stroke="black" points="238.5,-2154.5 533.5,-2154.5 "/>
<text text-anchor="start" x="246.5" y="-2140.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ifstream * datasetFile</text>
<text text-anchor="start" x="246.5" y="-2127.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * modelSavefile</text>
<text text-anchor="start" x="246.5" y="-2114.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::ofstream * outputFile</text>
<polyline fill="none" stroke="black" points="238.5,-2107.5 533.5,-2107.5 "/>
<text text-anchor="start" x="246.5" y="-2093.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords()</text>
<text text-anchor="start" x="246.5" y="-2080.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ MarkovPasswords(const</text>
<text text-anchor="start" x="246.5" y="-2067.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *filename)</text>
<text text-anchor="start" x="246.5" y="-2054.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ifstream * OpenDataset</text>
<text text-anchor="start" x="246.5" y="-2041.9" font-family="Helvetica,sans-Serif" font-size="12.00">File(const char *filename)</text>
<text text-anchor="start" x="246.5" y="-2028.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="246.5" y="-2015.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="246.5" y="-2002.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="246.5" y="-1989.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::ofstream * Save</text>
<text text-anchor="start" x="246.5" y="-1976.9" font-family="Helvetica,sans-Serif" font-size="12.00">(const char *filename)</text>
<text text-anchor="start" x="246.5" y="-1963.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Generate(unsigned</text>
<text text-anchor="start" x="246.5" y="-1950.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, const char</text>
<text text-anchor="start" x="246.5" y="-1937.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *wordlistFileName, int</text>
<text text-anchor="start" x="246.5" y="-1924.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen=6, int maxLen=12,</text>
<text text-anchor="start" x="246.5" y="-1911.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int threads=20)</text>
<text text-anchor="start" x="246.5" y="-1898.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Buff(const char</text>
<text text-anchor="start" x="246.5" y="-1885.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *str, double multiplier,</text>
<text text-anchor="start" x="246.5" y="-1872.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bDontAdjustSelfLoops</text>
<text text-anchor="start" x="246.5" y="-1859.9" font-family="Helvetica,sans-Serif" font-size="12.00">=true, bool bDontAdjustExtendedLoops=false)</text>
<text text-anchor="start" x="246.5" y="-1846.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void TrainThread(Markov</text>
<text text-anchor="start" x="246.5" y="-1833.9" font-family="Helvetica,sans-Serif" font-size="12.00">::API::Concurrency::ThreadShared</text>
<text text-anchor="start" x="246.5" y="-1820.9" font-family="Helvetica,sans-Serif" font-size="12.00">ListHandler *listhandler, char</text>
<text text-anchor="start" x="246.5" y="-1807.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter)</text>
<text text-anchor="start" x="246.5" y="-1794.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; void GenerateThread</text>
<text text-anchor="start" x="246.5" y="-1781.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *outputLock,</text>
<text text-anchor="start" x="246.5" y="-1768.9" font-family="Helvetica,sans-Serif" font-size="12.00"> unsigned long int n, std</text>
<text text-anchor="start" x="246.5" y="-1755.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, int</text>
<text text-anchor="start" x="246.5" y="-1742.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
</a>
</g>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="class_markov_1_1_a_p_i_1_1_model_matrix.html" target="_top" xlink:title="Class to flatten and reduce Markov::Model to a Matrix.">
<polygon fill="none" stroke="black" points="138,-1193.5 138,-1698.5 392,-1698.5 392,-1193.5 138,-1193.5"/>
<text text-anchor="middle" x="265" y="-1684.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::ModelMatrix</text>
<polyline fill="none" stroke="black" points="138,-1677.5 392,-1677.5 "/>
<text text-anchor="start" x="146" y="-1663.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char ** edgeMatrix</text>
<text text-anchor="start" x="146" y="-1650.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int ** valueMatrix</text>
<text text-anchor="start" x="146" y="-1637.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int matrixSize</text>
<text text-anchor="start" x="146" y="-1624.9" font-family="Helvetica,sans-Serif" font-size="12.00"># char * matrixIndex</text>
<text text-anchor="start" x="146" y="-1611.9" font-family="Helvetica,sans-Serif" font-size="12.00"># long int * totalEdgeWeights</text>
<text text-anchor="start" x="146" y="-1598.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool ready</text>
<polyline fill="none" stroke="black" points="138,-1591.5 392,-1591.5 "/>
<text text-anchor="start" x="146" y="-1577.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ModelMatrix()</text>
<text text-anchor="start" x="146" y="-1564.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool ConstructMatrix()</text>
<text text-anchor="start" x="146" y="-1551.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void DumpJSON()</text>
<text text-anchor="start" x="146" y="-1538.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ int FastRandomWalk</text>
<text text-anchor="start" x="146" y="-1525.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="146" y="-1512.9" font-family="Helvetica,sans-Serif" font-size="12.00"> const char *wordlistFileName,</text>
<text text-anchor="start" x="146" y="-1499.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="146" y="-1486.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool bFileIO=true)</text>
<text text-anchor="start" x="146" y="-1473.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Import(const char</text>
<text text-anchor="start" x="146" y="-1460.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="146" y="-1447.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void Train(const char</text>
<text text-anchor="start" x="146" y="-1434.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *datasetFileName, char</text>
<text text-anchor="start" x="146" y="-1421.9" font-family="Helvetica,sans-Serif" font-size="12.00"> delimiter, int threads)</text>
<text text-anchor="start" x="146" y="-1408.9" font-family="Helvetica,sans-Serif" font-size="12.00"># int FastRandomWalk</text>
<text text-anchor="start" x="146" y="-1395.9" font-family="Helvetica,sans-Serif" font-size="12.00">(unsigned long int n,</text>
<text text-anchor="start" x="146" y="-1382.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::ofstream *wordlist,</text>
<text text-anchor="start" x="146" y="-1369.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen=6, int maxLen</text>
<text text-anchor="start" x="146" y="-1356.9" font-family="Helvetica,sans-Serif" font-size="12.00">=12, int threads=20, bool</text>
<text text-anchor="start" x="146" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bFileIO=true)</text>
<text text-anchor="start" x="146" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkPartition</text>
<text text-anchor="start" x="146" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std::</text>
<text text-anchor="start" x="146" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="146" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="146" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, bool bFileIO, int threads)</text>
<text text-anchor="start" x="146" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00"># void FastRandomWalkThread</text>
<text text-anchor="start" x="146" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::mutex *mlock, std</text>
<text text-anchor="start" x="146" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">::ofstream *wordlist, unsigned</text>
<text text-anchor="start" x="146" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00"> long int n, int minLen, int</text>
<text text-anchor="start" x="146" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00"> maxLen, int id, bool bFileIO)</text>
<text text-anchor="start" x="146" y="-1200.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool DeallocateMatrix()</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node3 -->
<g id="edge2" class="edge">
<title>Node1&#45;&gt;Node3</title>
<path fill="none" stroke="midnightblue" d="M331.35,-1725.31C329.26,-1716.51 327.15,-1707.66 325.04,-1698.83"/>
<polygon fill="none" stroke="midnightblue" points="328,-1726.31 333.72,-1735.22 334.8,-1724.68 328,-1726.31"/>
</g>
<!-- Node10 -->
<g id="node10" class="node">
<title>Node10</title>
<g id="a_node10"><a xlink:href="class_python_1_1_markopy_1_1_markov_model.html" target="_top" xlink:title="Abstract representation of a markov model.">
<polygon fill="none" stroke="black" points="410,-1375.5 410,-1516.5 606,-1516.5 606,-1375.5 410,-1375.5"/>
<text text-anchor="middle" x="508" y="-1502.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkovModel</text>
<polyline fill="none" stroke="black" points="410,-1495.5 606,-1495.5 "/>
<text text-anchor="middle" x="508" y="-1481.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="410,-1474.5 606,-1474.5 "/>
<text text-anchor="start" x="418" y="-1460.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Import(str filename)</text>
<text text-anchor="start" x="418" y="-1447.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Export(str filename)</text>
<text text-anchor="start" x="418" y="-1434.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Train(str dataset,</text>
<text text-anchor="start" x="418" y="-1421.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str seperator, int threads)</text>
<text text-anchor="start" x="418" y="-1408.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def Generate(int count,</text>
<text text-anchor="start" x="418" y="-1395.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist, int minlen,</text>
<text text-anchor="start" x="418" y="-1382.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxlen, int threads)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node10 -->
<g id="edge11" class="edge">
<title>Node1&#45;&gt;Node10</title>
<path fill="none" stroke="midnightblue" d="M441.16,-1725.06C459.33,-1649.44 478.21,-1570.92 491.25,-1516.68"/>
<polygon fill="none" stroke="midnightblue" points="437.65,-1724.68 438.71,-1735.22 444.45,-1726.32 437.65,-1724.68"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="class_markov_1_1_model.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="280,-2212.5 280,-2574.5 492,-2574.5 492,-2212.5 280,-2212.5"/>
<text text-anchor="middle" x="386" y="-2560.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::Model&lt; char &gt;</text>
<polyline fill="none" stroke="black" points="280,-2553.5 492,-2553.5 "/>
<text text-anchor="start" x="288" y="-2539.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::map&lt; char, Node</text>
<text text-anchor="start" x="288" y="-2526.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; nodes</text>
<text text-anchor="start" x="288" y="-2513.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; Node&lt; char &gt; * starterNode</text>
<text text-anchor="start" x="288" y="-2500.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="288" y="-2487.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; edges</text>
<polyline fill="none" stroke="black" points="280,-2480.5 492,-2480.5 "/>
<text text-anchor="start" x="288" y="-2466.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Model()</text>
<text text-anchor="start" x="288" y="-2453.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ char * RandomWalk(Markov</text>
<text text-anchor="start" x="288" y="-2440.9" font-family="Helvetica,sans-Serif" font-size="12.00">::Random::RandomEngine</text>
<text text-anchor="start" x="288" y="-2427.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *randomEngine, int minSetting,</text>
<text text-anchor="start" x="288" y="-2414.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int maxSetting, char *buffer)</text>
<text text-anchor="start" x="288" y="-2401.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void AdjustEdge(const</text>
<text text-anchor="start" x="288" y="-2388.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char *payload, long</text>
<text text-anchor="start" x="288" y="-2375.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int occurrence)</text>
<text text-anchor="start" x="288" y="-2362.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(std::ifstream *)</text>
<text text-anchor="start" x="288" y="-2349.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Import(const char</text>
<text text-anchor="start" x="288" y="-2336.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="288" y="-2323.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(std::ofstream *)</text>
<text text-anchor="start" x="288" y="-2310.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool Export(const char</text>
<text text-anchor="start" x="288" y="-2297.9" font-family="Helvetica,sans-Serif" font-size="12.00"> *filename)</text>
<text text-anchor="start" x="288" y="-2284.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ Node&lt; char &gt; * StarterNode()</text>
<text text-anchor="start" x="288" y="-2271.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; Edge&lt;</text>
<text text-anchor="start" x="288" y="-2258.9" font-family="Helvetica,sans-Serif" font-size="12.00"> char &gt; * &gt; * Edges()</text>
<text text-anchor="start" x="288" y="-2245.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::map&lt; char, Node</text>
<text text-anchor="start" x="288" y="-2232.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; char &gt; * &gt; * Nodes()</text>
<text text-anchor="start" x="288" y="-2219.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void OptimizeEdgeOrder()</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M386,-2202.11C386,-2193.38 386,-2184.58 386,-2175.79"/>
<polygon fill="none" stroke="midnightblue" points="382.5,-2202.33 386,-2212.33 389.5,-2202.33 382.5,-2202.33"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="class_markov_1_1_a_p_i_1_1_c_u_d_a_1_1_c_u_d_a_model_matrix.html" target="_top" xlink:title="Extension of Markov::API::ModelMatrix which is modified to run on GPU devices.">
<polygon fill="none" stroke="black" points="0,-421.5 0,-1017.5 254,-1017.5 254,-421.5 0,-421.5"/>
<text text-anchor="start" x="8" y="-1003.9" font-family="Helvetica,sans-Serif" font-size="12.00">Markov::API::CUDA::</text>
<text text-anchor="middle" x="127" y="-990.9" font-family="Helvetica,sans-Serif" font-size="12.00">CUDAModelMatrix</text>
<polyline fill="none" stroke="black" points="0,-983.5 254,-983.5 "/>
<text text-anchor="start" x="8" y="-969.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * device_edgeMatrix</text>
<text text-anchor="start" x="8" y="-956.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * device_valueMatrix</text>
<text text-anchor="start" x="8" y="-943.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * device_matrixIndex</text>
<text text-anchor="start" x="8" y="-930.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * device_totalEdge</text>
<text text-anchor="start" x="8" y="-917.9" font-family="Helvetica,sans-Serif" font-size="12.00">Weights</text>
<text text-anchor="start" x="8" y="-904.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char ** device_outputBuffer</text>
<text text-anchor="start" x="8" y="-891.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char ** outputBuffer</text>
<text text-anchor="start" x="8" y="-878.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; char * flatEdgeMatrix</text>
<text text-anchor="start" x="8" y="-865.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int * flatValueMatrix</text>
<text text-anchor="start" x="8" y="-852.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaBlocks</text>
<text text-anchor="start" x="8" y="-839.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaThreads</text>
<text text-anchor="start" x="8" y="-826.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int iterationsPerKernelThread</text>
<text text-anchor="start" x="8" y="-813.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int totalOutputPerSync</text>
<text text-anchor="start" x="8" y="-800.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int totalOutputPerKernel</text>
<text text-anchor="start" x="8" y="-787.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int numberOfPartitions</text>
<text text-anchor="start" x="8" y="-774.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaGridSize</text>
<text text-anchor="start" x="8" y="-761.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int cudaMemPerGrid</text>
<text text-anchor="start" x="8" y="-748.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; long int cudaPerKernelAllocationSize</text>
<text text-anchor="start" x="8" y="-735.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; int alternatingKernels</text>
<text text-anchor="start" x="8" y="-722.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; unsigned long ** device</text>
<text text-anchor="start" x="8" y="-709.9" font-family="Helvetica,sans-Serif" font-size="12.00">_seeds</text>
<text text-anchor="start" x="8" y="-696.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; cudaStream_t * cudastreams</text>
<polyline fill="none" stroke="black" points="0,-689.5 254,-689.5 "/>
<text text-anchor="start" x="8" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void MigrateMatrix()</text>
<text text-anchor="start" x="8" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void FlattenMatrix()</text>
<text text-anchor="start" x="8" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ __host__ void FastRandom</text>
<text text-anchor="start" x="8" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00">Walk(unsigned long int</text>
<text text-anchor="start" x="8" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00"> n, const char *wordlistFileName,</text>
<text text-anchor="start" x="8" y="-610.9" font-family="Helvetica,sans-Serif" font-size="12.00"> int minLen, int maxLen, bool</text>
<text text-anchor="start" x="8" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bFileIO, bool bInfinite)</text>
<text text-anchor="start" x="8" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ char * AllocVRAMOutput</text>
<text text-anchor="start" x="8" y="-571.9" font-family="Helvetica,sans-Serif" font-size="12.00">Buffer(long int n, long int</text>
<text text-anchor="start" x="8" y="-558.9" font-family="Helvetica,sans-Serif" font-size="12.00"> singleGenMaxLen, long int CUDAKernel</text>
<text text-anchor="start" x="8" y="-545.9" font-family="Helvetica,sans-Serif" font-size="12.00">GridSize, long int sizePerGrid)</text>
<text text-anchor="start" x="8" y="-532.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void LaunchAsync</text>
<text text-anchor="start" x="8" y="-519.9" font-family="Helvetica,sans-Serif" font-size="12.00">Kernel(int kernelID, int</text>
<text text-anchor="start" x="8" y="-506.9" font-family="Helvetica,sans-Serif" font-size="12.00"> minLen, int maxLen)</text>
<text text-anchor="start" x="8" y="-493.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void prepKernel</text>
<text text-anchor="start" x="8" y="-480.9" font-family="Helvetica,sans-Serif" font-size="12.00">MemoryChannel(int numberOfStreams)</text>
<text text-anchor="start" x="8" y="-467.9" font-family="Helvetica,sans-Serif" font-size="12.00"># __host__ void GatherAsync</text>
<text text-anchor="start" x="8" y="-454.9" font-family="Helvetica,sans-Serif" font-size="12.00">KernelOutput(int kernelID,</text>
<text text-anchor="start" x="8" y="-441.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool bFileIO, std::ofstream</text>
<text text-anchor="start" x="8" y="-428.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &amp;wordlist)</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node3&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M173.15,-1183.72C170.94,-1174.75 168.88,-1165.82 167,-1157 157.5,-1112.34 150.25,-1064.64 144.72,-1017.77"/>
<polygon fill="none" stroke="midnightblue" points="169.78,-1184.64 175.62,-1193.48 176.56,-1182.93 169.78,-1184.64"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="class_python_1_1_markopy_1_1_model_matrix.html" target="_top" xlink:title="Abstract representation of a matrix based model.">
<polygon fill="none" stroke="black" points="176.5,-1061 176.5,-1150 365.5,-1150 365.5,-1061 176.5,-1061"/>
<text text-anchor="middle" x="271" y="-1136.4" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrix</text>
<polyline fill="none" stroke="black" points="176.5,-1129 365.5,-1129 "/>
<text text-anchor="middle" x="271" y="-1115.4" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="176.5,-1108 365.5,-1108 "/>
<text text-anchor="start" x="184.5" y="-1094.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ def FastRandomWalk</text>
<text text-anchor="start" x="184.5" y="-1081.4" font-family="Helvetica,sans-Serif" font-size="12.00">(int count, str wordlist,</text>
<text text-anchor="start" x="184.5" y="-1068.4" font-family="Helvetica,sans-Serif" font-size="12.00"> int minlen, int maxlen)</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node7 -->
<g id="edge6" class="edge">
<title>Node3&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M269.64,-1182.99C269.86,-1171.04 270.05,-1159.98 270.23,-1150.2"/>
<polygon fill="none" stroke="midnightblue" points="266.14,-1183.17 269.46,-1193.23 273.14,-1183.3 266.14,-1183.17"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_model_matrix_c_l_i.html" target="_top" xlink:title="Python CLI wrapper for CudaModelMatrix.">
<polygon fill="none" stroke="black" points="111.5,-191.5 111.5,-345.5 324.5,-345.5 324.5,-191.5 111.5,-191.5"/>
<text text-anchor="start" x="119.5" y="-331.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaModel</text>
<text text-anchor="middle" x="218" y="-318.9" font-family="Helvetica,sans-Serif" font-size="12.00">MatrixCLI</text>
<polyline fill="none" stroke="black" points="111.5,-311.5 324.5,-311.5 "/>
<text text-anchor="start" x="119.5" y="-297.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="119.5" y="-284.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bInfinite</text>
<polyline fill="none" stroke="black" points="111.5,-277.5 324.5,-277.5 "/>
<text text-anchor="start" x="119.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self)</text>
<text text-anchor="start" x="119.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="119.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="119.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="119.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="119.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node4&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M189.25,-411.34C194.05,-387.67 198.56,-365.42 202.52,-345.88"/>
<polygon fill="none" stroke="midnightblue" points="185.81,-410.7 187.25,-421.2 192.67,-412.09 185.81,-410.7"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="class_python_1_1_cuda_markopy_1_1_cuda_markopy_c_l_i.html" target="_top" xlink:title="CUDA extension to MarkopyCLI.">
<polygon fill="none" stroke="black" points="206,-0.5 206,-115.5 454,-115.5 454,-0.5 206,-0.5"/>
<text text-anchor="middle" x="330" y="-101.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.CudaMarkopy.CudaMarkopyCLI</text>
<polyline fill="none" stroke="black" points="206,-94.5 454,-94.5 "/>
<text text-anchor="start" x="214" y="-80.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="214" y="-67.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="206,-60.5 454,-60.5 "/>
<text text-anchor="start" x="214" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ None __init__(self)</text>
<text text-anchor="start" x="214" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="214" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="214" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node5&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M263.68,-182.46C275.76,-159.98 288.5,-136.26 299.55,-115.68"/>
<polygon fill="none" stroke="midnightblue" points="260.56,-180.88 258.91,-191.34 266.73,-184.19 260.56,-180.88"/>
</g>
<!-- Node8 -->
<g id="node8" class="node">
<title>Node8</title>
<g id="a_node8"><a xlink:href="class_python_1_1_markopy_1_1_model_matrix_c_l_i.html" target="_top" xlink:title="Extension of Python.Markopy.Base.BaseCLI for Markov::API::ModelMatrix.">
<polygon fill="none" stroke="black" points="272,-642.5 272,-796.5 480,-796.5 480,-642.5 272,-642.5"/>
<text text-anchor="middle" x="376" y="-782.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.ModelMatrixCLI</text>
<polyline fill="none" stroke="black" points="272,-775.5 480,-775.5 "/>
<text text-anchor="start" x="280" y="-761.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<text text-anchor="start" x="280" y="-748.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ fileIO</text>
<polyline fill="none" stroke="black" points="272,-741.5 480,-741.5 "/>
<text text-anchor="start" x="280" y="-727.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="280" y="-714.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="280" y="-701.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="280" y="-688.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="280" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="280" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="280" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str wordlist)</text>
</a>
</g>
</g>
<!-- Node7&#45;&gt;Node8 -->
<g id="edge7" class="edge">
<title>Node7&#45;&gt;Node8</title>
<path fill="none" stroke="midnightblue" d="M285.63,-1051.01C303.72,-984.83 334.66,-871.69 355.22,-796.51"/>
<polygon fill="none" stroke="midnightblue" points="282.2,-1050.26 282.94,-1060.82 288.96,-1052.1 282.2,-1050.26"/>
</g>
<!-- Node8&#45;&gt;Node5 -->
<g id="edge8" class="edge">
<title>Node8&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M345.8,-632.68C316.6,-549.71 272.79,-425.21 244.8,-345.66"/>
<polygon fill="none" stroke="midnightblue" points="342.58,-634.06 349.2,-642.33 349.18,-631.74 342.58,-634.06"/>
</g>
<!-- Node9 -->
<g id="node9" class="node">
<title>Node9</title>
<g id="a_node9"><a xlink:href="class_python_1_1_markopy_1_1_markopy_c_l_i.html" target="_top" xlink:title="Top level model selector for Markopy CLI.">
<polygon fill="none" stroke="black" points="342.5,-152.5 342.5,-384.5 541.5,-384.5 541.5,-152.5 342.5,-152.5"/>
<text text-anchor="middle" x="442" y="-370.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkopyCLI</text>
<polyline fill="none" stroke="black" points="342.5,-363.5 541.5,-363.5 "/>
<text text-anchor="start" x="350.5" y="-349.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ args</text>
<text text-anchor="start" x="350.5" y="-336.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ cli</text>
<polyline fill="none" stroke="black" points="342.5,-329.5 541.5,-329.5 "/>
<text text-anchor="start" x="350.5" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="350.5" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00"> add_help=False)</text>
<text text-anchor="start" x="350.5" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def add_arguments(self)</text>
<text text-anchor="start" x="350.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def help(self)</text>
<text text-anchor="start" x="350.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse(self)</text>
<text text-anchor="start" x="350.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments</text>
<text text-anchor="start" x="350.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">(self)</text>
<text text-anchor="start" x="350.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def parse_fail(self)</text>
<text text-anchor="start" x="350.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def process(self)</text>
<text text-anchor="start" x="350.5" y="-198.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def stub(self)</text>
<text text-anchor="start" x="350.5" y="-185.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def evaluate(self,</text>
<text text-anchor="start" x="350.5" y="-172.9" font-family="Helvetica,sans-Serif" font-size="12.00"> str filename)</text>
<text text-anchor="start" x="350.5" y="-159.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def init_post_arguments(sel)</text>
</a>
</g>
</g>
<!-- Node8&#45;&gt;Node9 -->
<g id="edge9" class="edge">
<title>Node8&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M388.69,-632.18C399.02,-561.9 413.7,-462.05 425.04,-384.9"/>
<polygon fill="none" stroke="midnightblue" points="385.19,-631.93 387.2,-642.33 392.11,-632.95 385.19,-631.93"/>
</g>
<!-- Node9&#45;&gt;Node6 -->
<g id="edge10" class="edge">
<title>Node9&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M375.33,-143.38C370.16,-133.76 365.11,-124.37 360.38,-115.56"/>
<polygon fill="none" stroke="midnightblue" points="372.29,-145.12 380.1,-152.27 378.45,-141.81 372.29,-145.12"/>
</g>
<!-- Node11 -->
<g id="node11" class="node">
<title>Node11</title>
<g id="a_node11"><a xlink:href="class_python_1_1_markopy_1_1_markov_passwords_c_l_i.html" target="_top" xlink:title="Extension of Python.Markopy.Base.BaseCLI for Markov::API::MarkovPasswords.">
<polygon fill="none" stroke="black" points="388.5,-1054.5 388.5,-1156.5 627.5,-1156.5 627.5,-1054.5 388.5,-1054.5"/>
<text text-anchor="middle" x="508" y="-1142.9" font-family="Helvetica,sans-Serif" font-size="12.00">Python.Markopy.MarkovPasswordsCLI</text>
<polyline fill="none" stroke="black" points="388.5,-1135.5 627.5,-1135.5 "/>
<text text-anchor="start" x="396.5" y="-1121.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ model</text>
<polyline fill="none" stroke="black" points="388.5,-1114.5 627.5,-1114.5 "/>
<text text-anchor="start" x="396.5" y="-1100.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ def __init__(self,</text>
<text text-anchor="start" x="396.5" y="-1087.9" font-family="Helvetica,sans-Serif" font-size="12.00"> bool add_help=True)</text>
<text text-anchor="start" x="396.5" y="-1074.9" font-family="Helvetica,sans-Serif" font-size="12.00">&#45; def _generate(self,</text>
<text text-anchor="start" x="396.5" y="-1061.9" font-family="Helvetica,sans-Serif" font-size="12.00"> wordlist)</text>
</a>
</g>
</g>
<!-- Node10&#45;&gt;Node11 -->
<g id="edge12" class="edge">
<title>Node10&#45;&gt;Node11</title>
<path fill="none" stroke="midnightblue" d="M508,-1365.12C508,-1300.53 508,-1211.59 508,-1156.63"/>
<polygon fill="none" stroke="midnightblue" points="504.5,-1365.27 508,-1375.27 511.5,-1365.27 504.5,-1365.27"/>
</g>
<!-- Node11&#45;&gt;Node9 -->
<g id="edge13" class="edge">
<title>Node11&#45;&gt;Node9</title>
<path fill="none" stroke="midnightblue" d="M511.79,-1044.25C518.13,-924.52 526.73,-648.59 489,-421 487.02,-409.05 484.33,-396.73 481.23,-384.52"/>
<polygon fill="none" stroke="midnightblue" points="508.29,-1044.14 511.24,-1054.31 515.28,-1044.52 508.29,-1044.14"/>
</g>
</g>
</svg>
