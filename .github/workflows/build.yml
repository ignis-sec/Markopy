name: Check, build and Release
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
env:
  
  # Environment variables for building strategy
  
  GITHUB_ACTION_WIN_PROJECT: D:\a\Markopy
  # Solution path
  SOLUTION_FILE_PATH: ./

  # Configuration type to build. Required for MSBuild
  BUILD_CONFIGURATION: Release

  # Include directory for MSBuild, python dependencies
  WIN_INC_DIR: C:\hostedtoolcache\windows\Python\*\

jobs:

  # Increment version depending on the action

  decide_version:
    name: Decide Next Version
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.core.outputs.bump }}
      branch: ${{ steps.core.outputs.branch }}
      prerelease: ${{ steps.core.outputs.prerelease }}
      draft: ${{ steps.core.outputs.draft }}

    steps:
    - uses: actions/checkout@v2
    - name: Decide versioning strategy
      id: core
      run: |
        chmod 755 ./.github/action_helpers/*;
        python3 ./.github/action_helpers/build.py version_bump

  reversion:
    needs: decide_version
    name: Bump Version & Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.tag_version.outputs.new_tag }} 
    steps:   

    - uses: actions/checkout@v2    
    
    # Only if its a push to master branch
    - name: Bump Version
      id: tag_version
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: ${{ needs.decide_version.outputs.bump }}
        VERBOSE: true
        RELEASE_BRANCHES: ${{ needs.decide_version.outputs.branch }}

    # Create a new release if its a push to master
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }} 
        release_name: Release v${{ steps.tag_version.outputs.new_tag }} 
        draft: ${{ needs.decide_version.outputs.draft }} 
        prerelease: ${{ needs.decide_version.outputs.prerelease }}


  # set the matrix output depending on the build type
  setup_build_matrix:
    name: Configure version matrix
    runs-on: ubuntu-latest
    outputs:
      windows_matrix: ${{ steps.core.outputs.windows_matrix }}
      linux_matrix: ${{ steps.core.outputs.linux_matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Configure Version Matrix for Python
      id: core
      run: python3 ./.github/action_helpers/build.py version_matrix
  


  build_linux_py:
    name: Build python libraries on linux with CMake
    needs: [reversion, setup_build_matrix]
    runs-on: ubuntu-latest
    container: ahakcil/markopy:0.5.0
    strategy:
      matrix:
        python-version: ${{fromJson(needs.setup_build_matrix.outputs.linux_matrix) }}
    steps:
    - uses: actions/checkout@v2
    - name: Compile CPP
      run: |
        ls -al; 
        cmake . -DPYTHON_VER=${{ matrix.python-version }}; 
        cmake --build . --target markov cudamarkov markovp cudamarkovp markopy cudamarkopy; 
        ls -alR out/;
        ls -al /usr/local/lib;

    - name: Zip built files # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip out/lib/markopy.so Markopy/src/CLI/markopy_cli.py  /usr/local/lib/libboost_python${{ matrix.python-version }}*so.1*
        zip --junk-paths cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip out/lib/cudamarkopy.so Markopy/src/CLI/markopy_cli.py  /usr/local/lib/libboost_python${{ matrix.python-version }}*so.1*
        zip --junk-paths libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip out/lib/libmarkov.so out/bin/markovp
        zip --junk-paths libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip out/lib/libcudamarkov.so out/bin/cudamarkovp
    
    - name: Upload LibMarkov
      if: matrix.python-version == '38'
      id: upload-release-asset-libmarkov
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} 
        asset_path: ./libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_name:   libmarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_content_type: application/zip

    - name: Upload LibCudaMarkov
      if: matrix.python-version == '38'
      id: upload-release-asset-libcudamarkov
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} 
        asset_path: ./libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_name:   libcudamarkov-${{ needs.reversion.outputs.tag }}-linux.zip
        asset_content_type: application/zip

    - name: Upload Markopy
      id: upload-release-asset-markopy
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_name:   markopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_content_type: application/zip

    - name: Upload CudaMarkopy
      id: upload-release-asset-cudamarkopy
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.reversion.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_name:   cudamarkopy-${{ needs.reversion.outputs.tag }}-linux-py${{ matrix.python-version }}.so.zip
        asset_content_type: application/zip
    
    

  #Integrity check on pull requests with sonar
  sonar:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Code Integrity Check with Sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          #ref: TODO: with dispatch input
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  clear_draft:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Clear Draft Releases
    steps:
      - name: Delete drafts
        uses: hugo19941994/delete-draft-releases@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}