<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_markov_1_1_node" kind="class" language="C++" prot="public">
    <compoundname>Markov::Node</compoundname>
    <includes refid="node_8h" local="no">node.h</includes>
    <templateparamlist>
      <param>
        <type>typename storageType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_markov_1_1_node_1a9851cd33ea466176a5728e3ccea6efed" prot="private" static="no" mutable="no">
        <type>storageType</type>
        <definition>storageType Markov::Node&lt; storageType &gt;::_value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="75" column="13" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_node_1a734f69786bb586f7f5164b33c1251d55" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t Markov::Node&lt; storageType &gt;::total_edge_weights</definition>
        <argsstring></argsstring>
        <name>total_edge_weights</name>
        <briefdescription>
<para>Character representation of this node. 0 for starter, 0xff for terminator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="77" column="10" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_markov_1_1_node_1ac70de8ab862a4595bc8e0f51f975d4ce" prot="private" static="no" mutable="no">
        <type>std::map&lt; storageType, <ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; * &gt;</type>
        <definition>std::map&lt;storageType, Markov::Edge&lt;storageType&gt;*&gt; Markov::Node&lt; storageType &gt;::edges</definition>
        <argsstring></argsstring>
        <name>edges</name>
        <briefdescription>
<para>Total weights of the vertices, required by RandomNext;. </para>
        </briefdescription>
        <detaileddescription>
<para>A map of all edges connected to this node, where this node is at the left.</para>
<para>Map is indexed by unsigned char, which is the character representation of the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="83" column="10" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_markov_1_1_node_1a09666b914debf751d0d8f0afc028ec53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Markov::Node&lt; storageType &gt;::Markov::Node</definition>
        <argsstring>()</argsstring>
        <name>Markov::Node</name>
        <briefdescription>
<para>Default constructor. Creates an empty <ref refid="class_markov_1_1_node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="1" column="0"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a2d87cd1f152ee6415225611404dbdfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Markov::Node&lt; storageType &gt;::Markov::Node</definition>
        <argsstring>(storageType _value)</argsstring>
        <name>Markov::Node</name>
        <param>
          <type>storageType</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Constructor. Creates a <ref refid="class_markov_1_1_node" kindref="compound">Node</ref> with no edges and with given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Nodes character representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="1" column="0"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1ad0dbf4d37c8c29943c0385b4d87a1988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
        <definition>Markov::Edge&lt; storageType &gt; * Markov::Node&lt; storageType &gt;::Link</definition>
        <argsstring>(Markov::Node&lt; storageType &gt; *)</argsstring>
        <name>Link</name>
        <param>
          <type><ref refid="class_markov_1_1_node" kindref="compound">Markov::Node</ref>&lt; storageType &gt; *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Link this node with another, with this node as its source. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- Target node which will be the right() of new edge. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new node with left as this, and right as parameter target. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="31" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a1f6da105c34126ab5f0ddb1f5907ca02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
        <definition>Markov::Edge&lt; storageType &gt; * Markov::Node&lt; storageType &gt;::Link</definition>
        <argsstring>(Markov::Edge&lt; storageType &gt; *)</argsstring>
        <name>Link</name>
        <param>
          <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Link this node with another, with this node as its source. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>DOES NOT</emphasis> create a new <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that will accept this node as its left. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the same edge as parameter target. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="39" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1aaed7c8987e805fca2b56d50c7f25d9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_node" kindref="compound">Markov::Node</ref>&lt; storageType &gt; *</type>
        <definition>Markov::Node&lt; storageType &gt; * Markov::Node&lt; storageType &gt;::RandomNext</definition>
        <argsstring>()</argsstring>
        <name>RandomNext</name>
        <briefdescription>
<para>Chose a random node from the list of edges, with regards to its weight, and traverse to that. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation is done by generating a random number in range of 0-this.total_edge_weights, and then iterating over the list of edges. At each step, weight of the edge is subtracted from the random number, and once it is 0, next node is selected. <simplesect kind="return"><para><ref refid="class_markov_1_1_node" kindref="compound">Node</ref> that was chosen at weight biased random. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="47" column="14" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="35" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1ac9405ba6ae41417c30f79f12bd80cb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Markov::Node&lt; storageType &gt;::UpdateEdges</definition>
        <argsstring>(Markov::Edge&lt; storageType &gt; *)</argsstring>
        <name>UpdateEdges</name>
        <param>
          <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Insert a new edge to the this.edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>- New edge that will be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if insertion was successful, false if it fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="53" column="6" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1a1147944cc9a2daa4f3128c4a40978b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
        <definition>Markov::Edge&lt;storageType&gt;* Markov::Node&lt; storageType &gt;::findEdge</definition>
        <argsstring>(storageType repr)</argsstring>
        <name>findEdge</name>
        <param>
          <type>storageType</type>
          <declname>repr</declname>
        </param>
        <briefdescription>
<para>Find an edge with its character representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repr</parametername>
</parameternamelist>
<parameterdescription>
<para>- character value of the target node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that is connected between this node, and the target node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="59" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1acdcb964f3fa7cdd7b55cbb8776686f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>&lt; storageType &gt; *</type>
        <definition>Markov::Edge&lt;storageType&gt;* Markov::Node&lt; storageType &gt;::findEdge</definition>
        <argsstring>(Node&lt; storageType &gt; *target)</argsstring>
        <name>findEdge</name>
        <param>
          <type><ref refid="class_markov_1_1_node" kindref="compound">Node</ref>&lt; storageType &gt; *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Find an edge with its pointer. Avoid unless neccessary because comptutational cost of find by character is cheaper (because of std::map) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- target node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_markov_1_1_edge" kindref="compound">Edge</ref> that is connected between this node, and the target node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="65" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_markov_1_1_node_1ada4486380ae3e196fb1c24e2ec8325f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char Markov::Node&lt; storageType &gt;::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
<para>Return character representation of this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>character representation at _value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="70" column="15" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.cpp" bodystart="16" bodyend="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node class that for the vertices of model. Connected with eachother using <ref refid="class_markov_1_1_edge" kindref="compound">Markov::Edge</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This class will <emphasis>later be templated to accept other data types than char</emphasis>. </para>
    </detaileddescription>
    <location file="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" line="13" column="1" bodyfile="D:/Repositories/MarkovPasswords/Win-visualstudio/MarkovModel/src/node.h" bodystart="13" bodyend="84"/>
    <listofallmembers>
      <member refid="class_markov_1_1_node_1a9851cd33ea466176a5728e3ccea6efed" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>_value</name></member>
      <member refid="class_markov_1_1_node_1ac70de8ab862a4595bc8e0f51f975d4ce" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>edges</name></member>
      <member refid="class_markov_1_1_node_1a1147944cc9a2daa4f3128c4a40978b44" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>findEdge</name></member>
      <member refid="class_markov_1_1_node_1acdcb964f3fa7cdd7b55cbb8776686f35" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>findEdge</name></member>
      <member refid="class_markov_1_1_node_1ad0dbf4d37c8c29943c0385b4d87a1988" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Link</name></member>
      <member refid="class_markov_1_1_node_1a1f6da105c34126ab5f0ddb1f5907ca02" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Link</name></member>
      <member refid="class_markov_1_1_node_1a09666b914debf751d0d8f0afc028ec53" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Markov::Node</name></member>
      <member refid="class_markov_1_1_node_1a2d87cd1f152ee6415225611404dbdfe6" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>Markov::Node</name></member>
      <member refid="class_markov_1_1_node_1aaed7c8987e805fca2b56d50c7f25d9d1" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>RandomNext</name></member>
      <member refid="class_markov_1_1_node_1a734f69786bb586f7f5164b33c1251d55" prot="private" virt="non-virtual"><scope>Markov::Node</scope><name>total_edge_weights</name></member>
      <member refid="class_markov_1_1_node_1ac9405ba6ae41417c30f79f12bd80cb47" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>UpdateEdges</name></member>
      <member refid="class_markov_1_1_node_1ada4486380ae3e196fb1c24e2ec8325f3" prot="public" virt="non-virtual"><scope>Markov::Node</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
